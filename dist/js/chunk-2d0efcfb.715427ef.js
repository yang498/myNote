(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0efcfb"],{"9a63":function(n,e,t){"use strict";t.r(e);var r=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},a=[],o={data:function(){return{text:"\n# string\n\n## 概述\n\n### 语法\n\n字符串就是零个或多个排在一起的字符，放在引号之中：\n\n··js\n'string' // 单引号\n\"string\" // 双引号\n`string` // 反单引号\n'key = \"value\"' // 不同的引号之间可以相互嵌套\n'Did she say \\'Hello\\'?' // 相同引号的嵌套需用 \\ 在引号前面转义\n··\n\n单双引号的字符串只能写在一行内，否则报错，分成多行的方式：\n\n··js\n// 每行尾部使用反斜杠，注意反斜杠后面除了换行符不能有其他字符\nvar longString = 'Long \\\n    string'\n\n// 使用 + 连接\nvar longString = 'Long '\n    + 'string'\n\n// 使用反单引号\nvar longString = `Long\n    string`\n··\n\n特殊字符需要使用反斜杠·\\·转义，如果在非特殊字符前面使用反斜杠会被省略\n\n!!\n\\0：null（·\\u0000·）\n\\b：后退键（·\\u0008·）\n\\f：换页符（·\\u000C·）\n\\n：换行符（·\\u000A·）\n\\r：回车键（·\\u000D·）\n\\t：制表符（·\\u0009·）\n\\v：垂直制表符（·\\u000B·）\n\\'：单引号（·\\u0027·）\n\\\"：双引号（·\\u0022·）\n\\\\：反斜杠（·\\u005C·）\n\\HHH：·\\·接三个八进制数（000 到 377）代表一个字符，·HHH·对应该字符的 Unicode 码点\n\\xHH：·\\x·接两个十六进制数（00 到 FF）代表一个字符，·HH·对应该字符的 Unicode 码点\n\\uXXXX：·\\u·接四个十六进制数（0000 到 FFFF）代表一个字符，·XXXX·对应该字符的 Unicode 码点\n!!\n\n### 字符串对象\n\n通过引号和·String()·定义的字符串是基本字符串，通过·new String()·定义的是字符串对象\n只有·new String()·生成字符串对象才有字符串的属性方法，或者通过索引查询值\n当基本字符串也使用字符串的属性方法时，JavaScript 会自动将其转化为字符串对象，虽然结果相同，但本质有点区别\n\n··js\n'abc' === String('abc') // true\n'abc' === new String('abc') // false\ntypeof 'abc'    // string\ntypeof new String('abc')    // object\nnew String('abc')   // {0: 'a', 1: 'b', 2: 'c', length: 3}\nnew String('abc').valueOf() // abc（原始字符串）\nnew String('abc') + 'd' // abcd\n\n// 字符串类似数组，有长度和索引\n'abc'[1]    // b\n'abc'.length    // 3\n\n// 改变长度和某个字符不会改变字符串，除了对字符串重新赋值\nvar s = 'hello'\ndelete s[0]\ns[1] = 'a'\ns.length = 3\n··\n\nString 对象还可以当作工具方法使用，将任意类型的值转为字符串\n\n··js\nString(true) // \"true\"\nString(5) // \"5\"\n··\n\n### 字符集\n\nJavaScript 使用 Unicode 字符集。JavaScript 引擎内部，所有字符都用 Unicode 表示\n所以将字符写成·\\uxxxx·的形式也能表示字符，输出的时候依然会转成字面形式\n一开始每个字符都是以 16 位（2 个字节）的 UTF-16 格式储存，码点处于·0000~FFFF·，\n而随着纳入的字符越来越多，并出现了 4 个字节的编码，范围也扩大到了·10FFFF·\n对于码点在·U+0000~U+FFFF·之间的字符，长度为 16 位（2 个字节）\n在·U+10000~U+10FFFF·之间的字符，长度为 32 位（4 个字节）\n4 个字节的字符其中前两个字节在·0xD800~0xDBFF·之间，后两个字节在·0xDC00~0xDFFF·之间\n例如码点·U+1D306·对应的字符为·𝌆·，它写成 UTF-16 就是·0xD834 0xDF06·。\n例如·𝌆·，浏览器会正确识别这是一个字符，实际在 JavaScript 内部是由两个字符组成的\n\n··js\n'𝌆'.length  // 2\n··\n\n### Base64 转码\n\nBase64 是一种编码方法，可以将任意 [ASCII](http://www.asciitable.com/) 码字符转成·0~9 A~Z a~z + /·这 64 个字符组成。用于避免出现特殊字符简化处理\n有时需要以文本格式传递二进制数据也可以使用 Base64 编码\n有两个 Base64 转换的方法：\n\n!!\nbtoa()：任意值转为 Base64 编码\natob()：Base64 编码转为原来的值\n!!\n\n··js\nbtoa('Hello World!') // SGVsbG8gV29ybGQh\natob('SGVsbG8gV29ybGQh') // Hello World!\n\nbtoa('你好') // 报错，不适合非 ASCII 码的字符\n// 所以需要先转码再使用\nbtoa(encodeURIComponent('你好'))    // JUU0JUJEJUEwJUU1JUE1JUJE\ndecodeURIComponent(atob('JUU0JUJEJUEwJUU1JUE1JUJE'))    // 你好\n··\n\n## 属性方法\n\n### 静态方法\n\n!!\nString.fromCharCode(...Unicode)：返回由 Unicode 码点组成的字符串\n    Unicode {Number}：一个或多个数值，代表 Unicode 码点\n    注意码点大于·0xFFFF·的字符需用 2 个参数表示\n!!\n\n### 实例属性\n\n!!\nString.prototype.length：字符串的长度\n!!\n\n### 实例方法\n\n以下方法前面省略·String.prototype.·\n\n!!\nslice(begin, end)：指定范围提取字符串某一段，参数可以是负数表示倒数，若·begin·大于·end·则返回空字符串\n    begin {Number} [0]：开始位置\n    end {Number} [length]：结束位置（不含该位置）\nsubstring(begin, end)：和·slice()·相似，区别在于：任一参数小于 0 就会当作 0，·begin·大于·end·则参数互换\n    此方法太违反直觉，建议使用·slice()·\nsubstr(begin, length)：和·slice()·相似，区别在于第二个参数是长度\n    begin {Number} [0]：开始位置\n    length {Number} [length - begin]：要提取的长度\nsplit(rule, length)：按照给定参数的规则分割字符串，返回一个由分割出来的子字符串组成的数组\n    rule {String/Regexp}：分割规则，关于正则分割见《regexp》\n    length {Number}：指定要分割几个\nindexOf(str, start)：查找参数在原字符串中第一次出现的索引，若没找到返回·-1·，第二个参数表示起始查找位置\nlastIndexOf(str, start)：和·indexOf()·相似，区别在于从右往左找\n\nlocaleCompare(compareStr, lang)：比较两个字符串，左边小于右边返回·<0·的数，相等返回 0，大于返回·>0·的数\n    实际上是在比较 Unicode 码点大小的基础上，又考虑了自然语言的顺序\n    lang {String}：比较的语言，默认为英文，可选简体中文（拼音）·zh-Hans-CN·，更多语言见 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)\ntrim()：去除字符串两端的空格，包括制表符·\\t \\v·、换行符·\\n·和回车符·\\r·\ntoLowerCase()：将字符串的英文字母全部转为小写\ntoUpperCase()：将字符串的英文字母全部转为大写\nmatch(str/reg)：以数组的形式返回匹配的结果，若匹配失败返回·null·，关于正则匹配见《regexp》\nsearch(str/reg)：和·indexOf()·相似，区别在于：没有第二个参数，且可以使用正则，关于正则匹配见《regexp》\nreplace(str/reg, newStr)：将字符串匹配的部分替换为新字符串，见《regexp》\n\nconcat(...obj)：将任意对象连接成字符串，可以用·+·代替\ncharAt(index)：返回指定位置的字符，可以用下标替代\ncharCodeAt(index)：返回指定位置的 Unicode 码点，即·String.fromCharCode()·的逆操作\n    注意 4 个字节的字符需连续使用 2 次，即·charCodeAt(index) + ' ' + charCodeAt(index + 1)·\n!!\n\n### split()\n\n··js\n'a|b|c'.split('|')  // ['a', 'b', 'c']\n'a|b|c'.split() // ['a|b|c']\n'a|b|c'.split('')   // ['a', '|', 'b', '|', 'c']\n'|a||c|'.split('|') // ['', 'a', '', 'c', '']\n'a|b|c'.split('|', 1)   // ['a']\n··\n\n### localeCompare()\n\n··js\n'a' < 'b' // true （a 的 Unicode 码点小于 b，即先 a 后 b）\n'a'.localeCompare('b') // -1 （同 Unicode 码点排序）\n\n'a' < 'A' // false （a 的 Unicode 码点大于 A，即先 A 后 a）\n'a'.localeCompare('A') // -1 （语言顺序上又是先 a 后 A）\n\n['深圳', '北京', '上海', '广州'].sort((a, b) => a.localeCompare(b, 'zh-Hans-CN')) // 中文按拼音排序\n··\n\n## es6 方法\n\n### 静态方法\n\n!!\nString.fromCodePoint(...Unicode)：·fromCharCode()·的升级版，能识别码点大于·0xFFFF·的字符\nString.raw(str)：返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，通常用于模板字符串的处理方法\n!!\n\n### 实例方法\n\n以下方法前面省略·String.prototype.·\n\n!!\nincludes(str, start)：判断是否在原字符串中找到了参数字符串，第二个参数表示起始搜索的位置\nstartsWith(str, start)：判断参数字符串是否在原字符串的头部，第二个参数表示起始搜索的位置\nendsWith(str, n)：判断参数字符串是否在原字符串的尾部，第二个参数表示在前·n·个字符中匹配\nrepeat(n)：将字符串重复·n·次\npadStart(length, str)：在字符串前面使用第二个参数·str·补全为新的长度即第一个参数·length·\n    如果省略第二个参数，默认使用空格补全长度\npadEnd(length, str)：在原字符串后面补全为新的长度，用法同·padStart()·\ntrimStart()：消除字符串头部的空格，浏览器还部署了额外的别名方法·trimLeft()·\ntrimEnd()：消除字符串尾部的空格，浏览器还部署了额外的别名方法·trimRight()·\nmatchAll()：返回一个正则表达式在当前字符串的所有匹配，详见《regexp》\n\ncodePointAt(index)：·charCodeAt()·的升级版，能正确处理 4 字节字符\nnormalize()：一些带有语调和重音符号的语言的字符串，和对应的合成符号是不相等的，此方法将其标准化以相等\n!!\n\n## es6\n\n### Unicode 表示法\n\n对于超出范围·\\u0000~\\uFFFF·的增强表示：·\\u{xxxxx}·，将码点放入大括号\n\n··js\n// 原来\n'\\uD842\\uDFB7' // 𠮷\n// 现在\n'\\u{20BB7}' // 𠮷\n··\n\n于是共有 6 种方法可以表示一个字符：\n\n··js\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n··\n\n### 遍历器接口\n\nES6 为字符串添加了遍历器接口（详见《es6 - Iterator》），即可以用·for...of·循环\n而且·for...of·可以识别大于·0xFFFF·的码点，传统的·for·循环无法识别\n\n··js\nfor (let codePoint of 'foo') console.log(codePoint)\n// f\n// o\n// o\n··\n\n### 模板字符串\n\n增强版字符串表示法，使用·`·反单引号，可以用来定义多行字符串，空格和缩进都会被保留\n模板字符串中嵌入变量，需要将变量名写在·${}·之中，大括号内部可以放入任意的表达式和运算：\n\n··js\nlet x = 1\nlet y = 2\n`${x} + ${y} = ${x + y}` // 1 + 2 = 3\n··\n\n·${}·中可以继续嵌套：\n\n··js\nconst tmpl = addrs => `\n<table>\n${addrs.map(addr => `¿\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n`¿).join('')}\n</table>\n`\n··\n\n如果要在模板字符串中表示·${}·字符串，需在·$·前面加上转义符，即·`\\${}`·\n\n### 标签模板\n\n模板字符串可以紧跟在一个函数名后面，相当于将括号改成模板字符串\n\n··js\nalert`123`\n// 等同于\nalert(123)\n··\n\n当模板字符里面有变量时不是简单的合并，而会处理成多个参数：\n\n··js\nlet a = 5\nlet b = 10\n\ntag`Hello ${ a + b } world ${ a * b }`\n// 等同于\ntag(['Hello ', ' world ', ''], 15, 50)\n··\n\n相当于对字符串模板进行·split()·分割，参数就是·${}·，再依次把·${}·中计算的结果作为后面的参数\n\n&2019/7/13\n"}}},i=o,s=t("2877"),l=Object(s["a"])(i,r,a,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0efcfb.715427ef.js.map