(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2218b1"],{cb95:function(n,e,t){"use strict";t.r(e);var a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},r=[],i={data:function(){return{text:'\n# css\n\n## display\n\n### flex\n\n弹性布局，[参考链接](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n**注意**：·flex·布局中子元素的·float·、·clear·和·vertical-align·属性将失效\n\n··css\n.box {\n    display: flex;\n}\n.box {\n    display: inline-flex;\n}\n··\n\n#### 容器的属性\n\n!!\nflex-direction：控制排列方向\n    row [默认值]：水平方向\n    row-reverse：水平方向，顺序倒置\n    column：垂直方向\n    column-reverse：垂直方向，顺序倒置\nflex-wrap：一行排不下的换行方式\n    nowrap [默认值]：不换行\n    wrap：换行\n    wrap-reverse：换行，每行顺序倒置，也就是第 1 行在最下面，最后一行在最上面\nflex-flow：·flex-direction flex-wrap·的简写\njustify-content [flex-start]：子元素在水平方向的对齐方式\n    flex-start：左对齐\n    flex-end：右对齐\n    center：居中\n    space-between：两端对齐，间隔相等\n    space-around：每个子元素两侧产生的间隔相等\n    space-evenly：每个子元素之间的间隔相等\nalign-items [stretch]：子元素在垂直方向的对齐方式\n    stretch：如果子元素未设置高度或设为·auto·，将占满整个容器的高度\n    flex-start：顶对齐\n    flex-end：底对齐\n    center：居中\n    baseline：以子元素的第一行文字的基线对齐\nalign-content [stretch]：多行对齐方式，如果子元素只有一行该属性不起作用，\n    stretch：每行垂直方向平均占满\n    其余属性和·justify-content·属性相同\n!!\n\n#### 子元素的属性\n\n!!\nalign-self [auto]：单独设置垂直对齐方式，属性和·align-items·相同，默认·auto·继承父元素的·align-items·\norder [0]：排列顺序，数值越小，排列顺序越靠前，可以为负数\nflex-grow [0]：放大比例，·0·表示不放大，可以是小数，负数无效，单独 1 个子元素设为·1·就会占满剩余空间\nflex-shrink [1]：缩小比例，·1·表示如果空间不足该子元素将缩小，可以是小数，负数无效，设为·0·将不缩小\nflex-basis [auto]：宽度，默认·auto·表示子元素本来的宽度。可使用各种单位\nflex：·flex-grow flex-shrink flex-basis·的简写，快捷值：·auto·（·1 1 auto·），·none·（·0 0 auto·）\n!!\n\n### grid\n\n网格布局，[参考链接](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)\n**注意**：·grid·布局中子元素的·float·、·vertical-align·和·column-*·等设置都将失效\n\n··css\ndiv {\n    display: grid;\n}\ndiv {\n    display: inline-grid;\n}\n··\n\n#### 容器的属性\n!!\ngrid-template-columns：列宽，可使用·百分比、repeat()、fr、minmax()、auto·，用中括号可定义网格线名称\ngrid-template-rows：行高，属性和·grid-template-columns·相同\ngrid-template-areas：单元格名，每个起始线为·区域名-start·，终止线为·区域名-end·，不用的区域用·.·表示\ngrid-template：·grid-template-columns grid-template-rows grid-template-areas·的简写\n\ngrid-auto-columns：多出元素的列宽，属性和·grid-template-columns·相同\n    例如设置了网格为 3*3 但有 10 个元素，最后那个即为多出的元素，若不指定宽高则默认为最小列宽和行高\ngrid-auto-rows：多出元素的行高，属性和·grid-template-rows·相同\ngrid-auto-flow [row]：排列方向\n    row：先行后列\n    column：先列后行\n    row dense：横向紧密填满\n    column dense：竖向紧密填满\ngrid：·template-rows template-columns template-areas auto-rows auto-columns auto-flow·的简写\n\njustify-items [stretch]：单元格在水平方向的对齐方式\n    stretch：拉伸\n    start：起始\n    end：结束\n    center：居中\nalign-items [stretch]：单元格在垂直方向的对齐方式，属性同·justify-items·\nplace-items：·align-items justify-items·的简写，若不写第二个值则第二个值和第一个值相等\n\njustify-content [start]：列在水平方向的对齐方式\n    space-around：每列的两侧间隔相等\n    space-between：两端对齐且间隔相等\n    space-evenly：每列的间隔相等\n    其余属性和·justify-items·相同\nalign-content [start]：行在垂直方向的对齐方式，属性同·justify-content·\nplace-content：·align-content justify-content·的简写，若不写第二个值则第二个值和第一个值相等\n\nrow-gap：行间距\ncolumn-gap：列间距\ngap：·row-gap column-gap·的简写，若不写第二个值则第二个值和第一个值相等\n!!\n\n#### 子元素的属性\n\n!!\ngrid-column-start：左边框所在的网格线\ngrid-column-end：右边框所在的网格线\ngrid-row-start：上边框所在的网格线\ngrid-row-end：下边框所在的网格线\n    可指定单元格在容器中的位置和可跨行跨列，值可以是网格线的数字或自定义的名字\n    使用·span 数字·可指定跨多少行，若产生了项目的重叠，则可使用·z-index·属性指定项目的层级\ngrid-column：·grid-column-start grid-column-end·的简写，以· / ·隔开\ngrid-row：·grid-row-start grid-row-end·的简写，以· / ·隔开\ngrid-area：指定项目放在哪一个区域，值为自定义的区域名称\n    也可以是·grid-row-start grid-column-start grid-row-end grid-column-end·的简写\njustify-self：单独设置水平位置，属性同·justify-items·\nalign-self：单独设置垂直位置，属性同·align-items·\nplace-self：·align-self justify-self·的简写，若不写第二个值则第二个值和第一个值相等\n!!\n\n··css\n/* 假设 div.container 有 9 个 div 子元素，定义 3 行 3 列的宽度为 100px，即将子元素 9 等分 */\n\n.container {\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 100px 100px;\n    grid-template-areas: "header header header"\n                        "main main sidebar"\n                        "footer footer .";\n}\n\n.container {\n    /* 单位还可以是百分比 */\n    grid-template-columns: 33.33% 33.33% 33.33%;\n    /* 重复写太麻烦，使用 repeat()，第一个参数是重复次数，第二个是重复的值 */\n    grid-template-columns: repeat(3, 33.33%);\n    grid-template-columns: repeat(2, 100px 20px 80px);\n    /* 若单元格大小固定，但容器大小不确定，希望容纳尽可能多的单元格使用 auto-fill 自动填充 */\n    grid-template-columns: repeat(auto-fill, 100px);\n    /* 使用 fr 关键字可以表示比例的关系 */\n    grid-template-columns: 1fr 1fr; /* 各占 50% */\n    grid-template-columns: 1fr 3fr; /* 第一个占 25%，第二个占 75% */\n    grid-template-columns: 100px 1fr 3fr; /* 第二个和第三个占容器宽度减 100px 后百分比 */\n    /* minmax() 可让长度固定在一个范围中，偏向最大值，即尽可能填满，第一个参数是最小值，第二个是最大值 */\n    grid-template-columns: 1fr 1fr minmax(100px, 1fr);\n    /* auto 可表示填充剩下的长度 */\n    grid-template-columns: 100px auto 100px;\n    /* 每根网格线（比如 3 个格子由 4 根线围成）还可定义名称以方便引用，写在方括号中 */\n    grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n    grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];\n}\n\n/* 定义子元素所处的位置，可指定 span 跨越多少个单元格 */\n.item1 {\n    grid-column-start: 1; /* 竖向网格线的第 1 根 */\n    grid-column-end: header-end; /* 定义区域名称的右边框 */\n    grid-row-start: span 2; /* 上边框与下边框之间有 2 个单元格，即跨 2 格 */\n    grid-row-end: span 2; /* 等同于 grid-row-start */\n}\n/* 简写 */\n.item1 {\n    grid-column: 1 / header-end;\n    grid-row: span 2;\n}\n\n/* grid-area */\n.item1 {\n    grid-area: header;\n}\n.item1 {\n    grid-area: 1 / 1 / 3 / 3;\n}\n··\n\n## 文字\n\n### font\n\n字体样式：·font: style variant weight size/line-height family;·\n最少简写：·font: size family;·\n\n!!\nfont-style [normal]：字体样式\n    normal：常规\n    italic：斜体，若当前字体不支持则会尝试用 oblique 代替\n    oblique：倾斜体，在纤细的字体中比 italic 要粗一点点，若当前字体不支持则会尝试用 italic 代替\nfont-weight [normal]：字体粗细，一些字体只提供·normal·和·bold·两种值\n    <number>：粗细程度，范围·1~1000·，通常写成整百的形式\n    normal：常规，相当于·400·\n    bold：粗体，相当于·700·\n    lighter：细体，相当于·100·\n    bolder：粗体，和·bold·差不多\nfont-size [medium]：字体大小，浏览器默认·medium·代表·16px·\n    <绝对大小关键字>：·xx-small, x-small, small, medium, large, x-large, xx-large·\n    <相对大小关键字>：·larger, smaller·（比父元素的字体大或小）\n    <length>：字体大小，参考 [<length>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/length)\n    <percentage>：以父元素为基准的百分比，参考 [<percentage>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage)\nline-height [normal]：字体行高\n    normal：约为·1.2·，取决于·font-family·\n    <length>：尺寸单位\n    <percentage>：以当前元素·font-size·为基准的倍数，子元素默认继承计算后的值，即等于父元素的行高\n    <number>：以当前元素·font-size·为基准的倍数，子元素默认继承这个值，即以子元素自身·font-size·为基准\nfont-family：字体，可以指定多个字体以逗号隔开，优先采用第一个，若用户计算机中没有或不支持则依次采用下一个\n    引号：若字体名不包含空格或者属于通用字体族名可以省略，否则需要加上\n    常用字体名：微软雅黑·Microsoft YaHei·，思源黑体·Source Han Sans·，英文等宽·Consolas·，宋体·SimSun·\nfont-variant [normal]：字体变形，复合属性，例如设置字体为小型大写字母\n其他不常用属性参考 [MDN <font>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font)\n!!\n\n### white-space\n\n处理空白\n\n%%\n| 属性 | 换行符 | 空格和制表符 | 文字换行 | 行尾空格 |\n| :-: |   :-:   |    :-:     |   :-:   |   :-:   |\n| ·normal·(默认) | 合并 | 合并 | 换行 | 删除 |\n| ·nowrap· | 合并 | 合并 | 不换行 | 删除 |\n| ·pre· | 保留 | 保留 | 不换行 | 保留 |\n| ·pre-wrap· | 保留 | 保留 | 换行 | 挂起 |\n| ·pre-line· | 保留 | 合并 | 换行 | 删除 |\n| ·break-spaces· | 保留 | 保留 | 换行 | 换行 |\n%%\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/white-space.html)\n\n### word-break\n\n处理字符超出边界的断行，下面的 CJK 指中日韩文字符\n\n!!\nnormal [默认]：非 CJK 不断行，且单词在本行放不下会另起一行，CJK 断行\nbreak-all：所有字符断行\nkeep-all：所有字符不断行\nbreak-word：所有字符断行，且单词在本行放不下会另起一行\n    等同于设置了·word-break: normal·和·overflow-wrap: anywhere·\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/word-break.html)\n\n### overflow-wrap\n\n处理单词在本行放不下是否断行（旧名：·word-wrap·）\n\n!!\nnormal [默认]：不断行\nbreak-word：断行\nanywhere：断行，且会被·width: min-content·影响\n!!\n\n下面的例子中只有 **Antidisestablishmentarianism** 设置了 ·overflow-wrap·\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/overflow-wrap.html)\n\n### word-spacing\n\n设置单词的间距，默认·normal·由字体或浏览器决定\n\n## 边框阴影\n\n## 图像\n\n### background\n\n背景样式：·background: color image repeat position / size origin attachment;·\n\n!!\nbackground-color [transparent]：背景颜色\nbackground-image [none]：背景图片，层级高于背景颜色，支持多个背景图片以逗号隔开，层级越后越低\n    url()：括号内的引号可省略，当省略时注意若图片链接内包含括号、空格、单双引号需使用·\\·进行转码\nbackground-repeat [repeat]：背景图片的重复方式\n    写法：可写 2 个值以空格隔开分别指定水平和垂直方向，在多个背景图片下可写多个值以逗号隔开分别指定重复方式\n    repeat|repeat-x|repeat-y|no-repeat：分别是·重复|只在水平方向重复|只在垂直方向重复|不重复·\n    space：不裁剪重复，把边上裁剪的部分挤出去，所以图像之间会有些空隙，·background-position·会被忽视\n    round：不裁剪重复，让边上裁剪的部分尽可能的挤进来，所以图像会适当的缩小，图像之间没有空隙\nbackground-position [0% 0%]：背景图片的位置\n    写法：可写 2 个值以空格隔开分别指定水平和垂直方向，在多个背景图片下可写多个值以逗号隔开分别指定位置\n    单位：支持 px、百分比等单位，可以是负数\n    top|left|right|bottom|center：放在指定边缘，分别代表·50% 0%|0% 50%|100% 50%|50% 100%|50% 50%·\n    left|right + 距离：定义 x 轴位置，相对于该方位的距离，例如·right 10px·表示 x 轴上距离容器右侧 10px\n    top|bottom + 距离：定义 y 轴位置，相对于该方位的距离，例如·bottom 10px·表示 y 轴上距离容器底部 10px\n        所以可以写 4 个值，例如·right 10px bottom 10px·表示背景图片距离右侧 10px、距离底部 10px\nbackground-position-x [left]：单独设置背景图片 x 轴的位置\nbackground-position-y [top]：单独设置背景图片 y 轴的位置\nbackground-size [auto auto]：背景图片的大小\n    写法：可写 2 个值以空格隔开分别指定宽度和高度，在多个背景图片下可写多个值以逗号隔开分别指定大小\n    单位：支持 px、百分比等单位\n    auto：保持背景图片的原比例\n    cover：保持背景图片的比例完全覆盖背景区域，左右或上下部分可能会被裁剪\n    contain：保持背景图片的比例完全嵌入背景区域，不会被裁剪\nbackground-attachment [scroll]：背景图片是否随容器滚动，多个背景图片可写多个值以逗号隔开分别指定滚动方式\n    scroll：容器内固定，容器外滚动\n    fixed：绝对固定，不管处于哪个容器都不会滚动（滚动时实时重绘，比较耗性能，最好使用其他固定方案）\n    local：跟随容器滚动\nbackground-origin [padding-box]：背景图片的显示区域起点，·background-attachment·为·fixed·时此属性无效\n    padding-box：以 padding 区域为起点\n    border-box：以 border 区域为起点\n    content-box：以原始内容区域为起点，即不包括 padding 和 border\nbackground-clip [border-box]：背景图片或颜色的裁剪范围，和·background-origin·区别于不改变位置而只裁剪\n    border-box：在 border 区域内显示\n    padding-box：在 padding 区域内显示\n    content-box：在原始内容区域内显示，即不包括 padding 和 border\n    text：在文字区域内显示，注意如果要显示背景图片需把文字颜色去掉，即·color: transparent;·\n        ·text·属性的兼容性不太好，若不支持需加上·-webkit-·前缀，即·-webkit-background-clip: text;·\nbackground-blend-mode [normal]：多个背景图片下定义混合模式，参考 [MDN 中文](https://developer.mozilla.org/zh-CN/docs/Web/CSS/blend-mode) 和 [MDN 英文](https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode)\n!!\n\n### mask\n\n用遮罩图片的透明部分把元素遮住（变透明），所以不透明的 jpg 图片和非透明渐变是没有效果的\n考虑兼容性应加上·-webkit-·前缀\n遮罩：·mask: image mode repeat position clip origin size type composite;·\n可以分别设置多个属性以逗号隔开，例如：·mask: url(...), radial-gradient(...);·\n\n!!\nmask-image [none]：遮罩图片，参考·background-image·\nmask-mode [match-source]：遮罩模式\n    match-source：自适应，即根据图片类型自动采用·alpha·和·luminance·\n    alpha：基于透明度遮罩\n    luminance：基于亮度遮罩（整体比·alpha·偏透明一点）\nmask-repeat [repeat]：重复方式，参考·background-repeat·\nmask-position [0% 0%]：遮罩的位置，参考·background-position·\nmask-clip [border-box]：遮罩的裁剪范围，参考·background-clip·，并多出以下属性：\n    margin-box：在 margin 区域内裁剪\n    fill-box：在 SVG 边界内裁剪\n    stroke-box：在 SVG 绘制的边框内裁剪\n    view-box：在 SVG 区域内裁剪\n    no-clip：不裁剪\nmask-origin [border-box]：遮罩的范围起点，参考·background-origin·，多出的属性参考·mask-clip·\nmask-size [auto]：遮罩的大小，参考·background-size·\nmask-type [luminance]：专用于 SVG 元素的·mask-mode·，注意不支持·match-source·属性\nmask-composite [source-over]：多个遮罩下的混合模式，参考 [MDN 老版](https://developer.mozilla.org/zh-CN/docs/Web/CSS/mask-composite)， [MDN 新版](https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-mask-composite) 和 [Canvas](https://www.canvasapi.cn/CanvasRenderingContext2D/globalCompositeOperation)\n!!\n\n### clip-path\n\n创建指定形状裁剪元素：·clip-path: <box> <shape>·\n并且可以用于·transition·和·animation·，但需要动画前后坐标的数目一致\n\n!!\n<box> [border-box]：裁剪范围\n    border-box：在 border 区域内裁剪\n    padding-box：在 border 区域内裁剪\n    content-box：在 content 区域内裁剪\n    margin-box：在 margin-box 区域内裁剪\n    fill-box：在 SVG 边界内裁剪\n    stroke-box：在 SVG 绘制的边框内裁剪\n    view-box：在 SVG 区域内裁剪\n<shape>：裁剪形状\n    url()：加载图片形状\n    inset(<side>\\{1,4} round <radius>)：矩形\n        <side>：四个边分别距离元素上下左右边的距离，写法同·margin·\n        <radius>：定义圆角，写法同·border-radius·\n    circle(<radius> at <position>)：圆形\n        <radius>：半径长度，并支持：\n            百分比：以公式·sqrt(width^2+height^2)/sqrt(2)·计算‘\n            closest-side：以距圆心最近的边相切\n            farthest-side：以距圆心最远的边相切\n        <position> [center]：圆心的位置，参考·background-position·\n    ellipse(<rx rx> at <position>)：椭圆\n        <rx rx>：x 轴 y 轴的半径，若填百分比将分别参考元素宽高的长度，也支持·closest-side farthest-side·\n        <position> [center]：圆心的位置，参考·background-position·\n    polygon(<fill-rule>, <x y>, <x y>*))：多边形\n        <fill-rule> [nonzero]：填充规则\n            nonzero：叠加\n            evenodd：相交\n        <x y>：点的位置，即三个以上的点可连接为多边形，两个点以下无效果，元素左上角为起点，支持长度和百分比\n    path(<fill-rule>, <string>)：SVG 路径\n        <fill-rule>：填充规则，和·polygon()·相同\n        <string>：SVG 路径，需用引号包裹\n!!\n\n画个外正方形裁剪圆环 demo：\n\n··css\n/* <div class="circle"></div> */\n\n.circle {\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    animation: run 10s linear infinite;\n    background-image: radial-gradient(#fff 50%, transparent 50%),\n                    conic-gradient(from 180deg, transparent 160deg, #f08, #f00, transparent 200deg),\n                    conic-gradient(#f00 20deg, #f80, #fe0, #0e0, #0cc, #08f, #80f, #f08 340deg);\n}\n\n@keyframes run {\n    0%    { clip-path: polygon(50% 50%, 50% -150%, 50% -150%, 50% -150%, 50% -150%, 50% -150%); }\n    12.5% { clip-path: polygon(50% 50%, 50% -150%, 150% 50%, 150% 50%, 150% 50%, 150% 50%); }\n    25%   { clip-path: polygon(50% 50%, 50% -150%, 150% 50%, 50% 150%, 50% 150%, 50% 150%); }\n    37.5% { clip-path: polygon(50% 50%, 50% -150%, 150% 50%, 50% 150%, -50% 50%, -50% 50%); }\n    50%   { clip-path: polygon(50% 50%, 50% -150%, 150% 50%, 50% 150%, -50% 50%, 50% -150%); }\n    62.5% { clip-path: polygon(50% 50%, 150% 50%, 150% 50%, 50% 150%, -50% 50%, 50% -150%); }\n    75%   { clip-path: polygon(50% 50%, 50% 150%, 50% 150%, 50% 150%, -50% 50%, 50% -150%); }\n    87.5% { clip-path: polygon(50% 50%, -50% 50%, -50% 50%, -50% 50%, -50% 50%, 50% -150%); }\n    100%  { clip-path: polygon(50% 50%, 50% -150%, 50% -150%, 50% -150%, 50% -150%, 50% -150%); }\n}\n··\n\n## 渐变\n\n应用于·background-image·和·mask-image·\n\n### linear-gradient()\n\n线性渐变：·linear-gradient([angle], color [start]*, [color [start]*]+)·\n\n!!\n<angle> [to bottom/180deg]：角度，支持角度单位或·to top/left/right/bottom·，或 2 个例如·to top right·\n    角度：和时钟一样，·0deg·相当于 12 点，这个角度代表渐变终点，例如·0deg·表示从元素的中心点到顶部的渐变\n<start>：渐变起始点，可使用长度单位或百分比，注意每 2 个颜色的渐变方向是相对的，例如：\n    ·linear-gradient(90deg, #f00 50%, #08f)·：元素左半边是纯红，从一半宽度开始才由红渐变到蓝\n    ·linear-gradient(90deg, #f00, #08f 50%)·：元素左半边进行了由红到蓝的渐变，右半边是纯蓝\n    ·linear-gradient(90deg, #f00 50%, #08f 50%)·：元素左半边是纯红，右半边是纯蓝\n    ·linear-gradient(90deg, #f00 33%, #0c0 33% 66%, #08f 66%)·：红绿蓝界限分明\n    ·linear-gradient(90deg, #f00 100%, #08f 50%)·：整个元素都是纯红，即第一个颜色优先级最高，越后越低\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/function-linear-gradient.html)\n\n### radial-gradient()\n径向渐变：·radial-gradient([shape [extent-keyword] [at position]], color [start]*, [color [start]*]+)·\n!!\n<shape> [ellipse]：渐变的形状\n    ellipse：以元素轴对称的椭圆，所以若元素的宽高相等则是个正圆\n    circle：始终是正圆\n<extent-keyword> [farthest-corner]：渐变边缘轮廓的具体位置，差异程度取决于渐变的中心点\n    farthest-corner：渐变的边缘轮廓和元素最近的角相切\n    farthest-side：渐变的边缘轮廓和元素最近的边相切\n    closest-corner：渐变的边缘轮廓和元素最远的角相切，若渐变的中心点处于中间则和·farthest-corner·效果一样\n    closest-side：渐变的边缘轮廓和元素最远的边相切，若渐变的中心点处于中间则和·farthest-side·效果一样\nat <position> [center]：渐变的中心点，写法参考·background-position·\n<start>：渐变起始点，写法参考·linear-gradient()·\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/function-radial-gradient.html)\n\n### 重复线性径向渐变\n\n重复多次渐变图案直到填满元素\n\n!!\nrepeating-linear-gradient()：线性重复渐变，参数和·linear-gradient()·一样\nrepeating-radial-gradient()：径向重复渐变，参数和·radial-gradient()·一样\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/function-repeating-linear-gradient.html)\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/function-repeating-radial-gradient.html)\n\n### conic-gradient()\n\n角度渐变：·conic-gradient([from angle] [at position], color [angle]*, [color [angle]*]+)·\n\n!!\nfrom <angle>：渐变起始角度\nat <position>：渐变中心点，写法参考·background-position·\n<angle>：每个渐变起始角度，作用参考·linear-gradient()·\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/function-conic-gradient.html)\n\n### demo\n\n[更多精彩案例](https://leaverou.github.io/css3patterns/)，[结合背景混合模式](https://codepen.io/bennettfeely/pen/wJbtk)\n\n#### bootstrap 进度条：\n\n··css\n/* <div class="progress"></div> */\n\n.progress {\n    width: 320px;\n    height: 16px;\n    border-radius: 5px;\n    background-color: #08f;\n    background-image: linear-gradient(45deg,\n        transparent 25%, rgba(255, 255, 255, 0.2) 25% 50%,\n        transparent 50% 75%, rgba(255, 255, 255, 0.2) 75%\n    );\n    background-size: 16px; /* size 和 height 相等，缩小后由 background-repeat 填满 */\n    animation: progress 1s linear infinite;\n}\n\n@keyframes progress {\n    to { background-position-x: 16px; } /* 位移一个 background-size 距离作为一个周期 */\n}\n··\n\n#### 环形进度条：注意 50% 进度之前灰色和蓝色调换\n\n··css\n/* <div class="progress">70%</div> */\n\n.progress {\n    width: 200px;\n    height: 200px;\n    font-size: 24px;\n    font-weight: bold;\n    line-height: 200px;\n    text-align: center;\n    border-radius: 50%;\n    background-color: #ccc;\n    background-image: radial-gradient(#fff 90px, transparent 90px),\n                        linear-gradient(90deg, #08f 50%, transparent 50%),\n                        linear-gradient(30deg, #08f 50%, transparent 50%);\n}\n··\n\n#### 线性渐变格子\n\n··css\n/* <div class="grid repeating-linear"></div> */\n\n.grid {\n    width: 220px;\n    height: 220px;\n    background-color: rgba(200, 0, 0, 0.7);\n}\n\n/* .repeating-linear 和 .linear 效果相同 */\n.repeating-linear {\n    background-image: repeating-linear-gradient(transparent 0 20px, rgba(255, 255, 255, 0.5) 20px 40px),\n                        repeating-linear-gradient(90deg, transparent 0 20px, rgba(255, 255, 255, 0.5) 20px 40px);\n}\n.linear {\n    background-image: linear-gradient(transparent 50%, rgba(255, 255, 255, 0.5) 50%),\n                        linear-gradient(90deg, transparent 50%, rgba(255, 255, 255, 0.5) 50%);\n    background-size: 40px 40px;\n}\n··\n\n#### 径向渐变小圆点重复\n\n··css\n/* <div class="dot"></div> */\n\n.dot {\n    width: 220px;\n    height: 220px;\n    background-color: rgba(200, 0, 0, 0.7);\n    background-image: radial-gradient(rgba(255, 255, 255, 0.8) 30%, transparent 30%);\n    background-size: 40px 40px;\n    background-repeat: round;\n}\n··\n\n#### 角度渐变彩色圆环\n\n··css\n/* <div class="circle"></div> */\n\n.circle {\n    width: 220px;\n    height: 220px;\n    border-radius: 50%;\n    background-image: radial-gradient(#fff 50%, transparent 50%),\n                    conic-gradient(from 180deg, transparent 160deg, #f08, #f00, transparent 200deg),\n                    conic-gradient(#f00 20deg, #f80, #fe0, #0e0, #0cc, #08f, #80f, #f08 340deg);\n}\n··\n\n## transform\n\n### transform\n\n位移、旋转、缩放或倾斜元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的\n\n!!\nnone：不应用任何变换\n\ntranslate(x, y)：位移\ntranslate3d(x, y, z)：3D 位移\ntranslateX(x)：水平位移\ntranslateY(y)：垂直位移\ntranslateZ(z)：3D 空间的 z 轴位移\n\nrotate(a)：旋转\nrotate3d(x, y, z, a)：3D 旋转，·x y z·分别表示该轴的矢量，没有单位的数字，通常取·[-1~1]·\nrotateX(a)：绕 x 轴旋转\nrotateY(a)：绕 y 轴旋转\nrotateZ(a)：绕 z 轴旋转\n\nscale(x, y)：缩放，·x y·默认都为·1·，若·y·不存在则默认和·x·相同，设为负数表示镜像缩放\nscale3d(x, y, z)：3D 缩放\nscaleX(x)：水平缩放\nscaleY(y)：垂直缩放\nscaleZ(z)：3D 空间的 z 轴缩放\n\nskew(ax, ay)：角度倾斜\nskewX(ax)：水平倾斜\nskewY(ay)：垂直倾斜\n\nmatrix(a, b, c, d, x, y)：矩阵，集合所有 2D 变换\nmatrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4)：3D 矩阵，集合所有 3D 变换\n\nperspective(l)：·z=0·平面与观察者（屏幕）之间的距离，注意，此属性只应用于自身，不会被子元素继承\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/transform.html)\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/rotate3d.html)\n\n### perspective\n\n·z=0·平面与观察者（屏幕）之间的距离，注意，此属性不应用于自身，而是为子元素提供透视基准点\n\n### perspective-origin\n\n观察者（屏幕）的位置，支持长度、百分比或·top left right bottom center·中的关键字\n可以设置 2 个以内的值分别表示·x y·轴的位置偏移量\n注意，此属性只和·perspective·相关，与·transform: perspective(l)·无关\n\n### transform-style\n\n设置元素的子元素是位于 3D 空间中还是平面中，默认为平面\n\n!!\nflat：平面\npreserve-3d：3D\n!!\n\n### transform-origin\n\ntransform 的原点，支持长度、百分比或·top left right bottom center·中的关键字\n可以设置 3 个以内的值分别表示·x y z·轴的原点偏移量，其中·z·轴只支持长度单位，不支持百分比和关键字\n\n### backface-visibility\n\n当元素背面朝向观察者（屏幕）时是否可见，默认可见。当元素出现背面时通常是绕 x 或 y 轴旋转时出现\n\n!!\nvisible：可见\nhidden：不可见\n!!\n\n### demo\n\n#### 立方体\n\n··html\n<div class="background">\n    <div class="cube">\n        <div class="face front">1</div>\n        <div class="face right">2</div>\n        <div class="face back">3</div>\n        <div class="face left">4</div>\n        <div class="face top">5</div>\n        <div class="face bottom">6</div>\n    </div>\n</div>\n\n<style>\n    .background {\n        width: 300px;\n        height: 300px;\n        background-image: linear-gradient(to right, #ff6e7f, #bfe9ff);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .cube {\n        width: 100px;\n        height: 100px;\n        position: relative;\n        transform-style: preserve-3d;\n        transform: rotate3d(-1, -1, 0, 45deg);\n    }\n    .face {\n        width: 100%;\n        height: 100%;\n        color: #fff;\n        font-size: 24px;\n        font-weight: bold;\n        line-height: 100px;\n        text-align: center;\n        position: absolute;\n        background-color: rgba(200, 0, 0, 0.7);\n        background-image: repeating-linear-gradient(transparent 0 28px, rgba(255, 255, 255, 0.5) 28px 36px),\n            repeating-linear-gradient(90deg, transparent 0 28px, rgba(255, 255, 255, 0.5) 28px 36px);\n    }\n    .front {\n        background-color: #f00;\n        transform: translateZ(50px);\n    }\n    .right {\n        background-color: #f80;\n        transform: rotateY(90deg) translateZ(50px);\n    }\n    .back {\n        background-color: #0c0;\n        transform: rotateY(180deg) translateZ(50px);\n    }\n    .left {\n        background-color: #08f;\n        transform: rotateY(-90deg) translateZ(50px);\n    }\n    .top {\n        background-color: #c0c;\n        transform: rotateX(90deg) translateZ(50px);\n    }\n    .bottom {\n        background-color: #f08;\n        transform: rotateX(-90deg) translateZ(50px);\n    }\n</style>\n··\n\n## 过渡动画\n\n### transition\n\n过渡效果：·transition: property duration timing-function delay;·\n可以分别设置多个属性的过渡动画以逗号隔开，例如：·transition: opacity 0.5s ease-out, transform 0s 0.5s;·\n\n!!\ntransition-property [all]：指定应用过渡属性的名称，可被动画的属性详见 [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties)\n    all：所有可被动画的属性都过渡\n    none：没有过渡动画\n    <property>：指定可被动画的属性\ntransition-duration [0s]：过渡动画所需的时间，单位秒(s)或毫秒(ms)\ntransition-timing-function [ease]：过渡动画的加速度曲线\n    ease：快慢快\n    linear：匀速\n    ease-in：先慢后快\n    ease-out：先快后慢\n    ease-in-out：快慢快，慢的阶段比·ease·更匀速\n    step-start：一开始就结束了，·steps(1, start)·的快捷写法\n    step-end：开始不变，直到·duration·的最后结束，·steps(1, end)·的快捷写法\n    cubic-bezier(x1, y1, x2, y2)：贝塞尔曲线函数，可使用 [预览调试工具](http://cubic-bezier.com/#.17,.67,.83,.67)\n    steps(<steps>, <direction>)：等距阶梯函数\n        <steps>：分几步，应传入整数\n        <direction>：左连续还是右连续\n            start：左连续，因此第一步发生在动画开始时\n            end：右连续，因此最后一步发生在动画结束时\ntransition-delay [0s]：过渡动画开始前的等待时间，单位秒(s)或毫秒(ms)\n!!\n\n### animation\n\n动画：·animation: name duration timing-function delay iteration-count direction fill-mode play-state;·\n可以同时设置多个动画以逗号隔开，例如：·animation: move 1s ease-out, down 2s linear;·\n\n!!\nanimation-name [none]：自定义动画名称，然后由·@keyframes·定义动画序列\n    书写规范：由·a-z A-Z 0-9 _ -·组成，不能以数字或双横线开头，大小写敏感\nanimation-duration [0s]：动画时长，单位秒(s)或毫秒(ms)\nanimation-timing-function [ease]：动画的加速度曲线，参考·transition·\nanimation-delay [0s]：动画开始前的等待时间，单位秒(s)或毫秒(ms)\nanimation-iteration-count [1]：动画执行次数，可以是小数表示最后一次动画进行的百分比，或·infinite·无限\nanimation-direction [normal]：动画方向\n    normal：从起点开始到终点\n    reverse：从终点开始到起点\n    alternate：从起点开始交替反向运行\n    alternate-reverse：从终点开始交替反向运行\nanimation-fill-mode [none]：动画执行前后元素应用的样式\n    none：不应用样式\n    forwards：元素的样式停留在动画的最后一帧\n    backwards：元素的样式在一开始就应用动画的第一帧，设置了·animation-delay·比较明显\n    both：同时使用·forwards·和·backwards·\nanimation-play-state [running]：运行或暂停动画，一般由 js 动态设置，若动画已结束则设置无效\n    running：运行\n    paused：暂停\n!!\n\n~[375](https://interactive-examples.mdn.mozilla.net/pages/css/animation.html)\n\n### @keyframes\n\n定义动画关键帧的样式：\n\n··css\n@keyframes <animation-name> {\n    <0% / from> {\n        /* 样式 */\n    }\n    <percentage> {\n        /* 样式 */\n    }\n    <100% / to> {\n        /* 样式 */\n    }\n}\n··\n\n!!\n开始状态：0%，或者使用关键字·from·\n结束状态：100%，或者使用关键字·to·\n其他过程：介于·0~100·的百分比\n!!\n\n**注意**：\n\n!!\n如果没有指定动画的开始或结束状态，将使用元素的现有样式作为对应的起始或结束状态\n可以按任意顺序列出关键帧百分比，执行时会按照进度执行\n若使用·@keyframes·定义多个相同的名称，以最后一个为准\n若定义多个相同的百分比，也以最后一个为准\n关键帧中将忽略·!important·的作用\n!!\n\n### will-change\n\n启用 GPU 加速来提升页面渲染性能\n\n!!\nwill-change[auto]：\n    auto：浏览器常规优化方式\n    scroll-position：滚动时提升性能\n    contents：页面动画或变化时提升性能\n    <custom-ident>：自定义需要提升性能的属性，例如·animation·、·transform·，可以书写多个值以逗号隔开\n!!\n\n**注意**：最好是在需要的时候使用，而不要过度使用，否则导致页面卡顿\n\n### demo\n\n#### 模拟 Windows 进度条：\n\n··css\n/* <div class="progress">\n    <div class="color"></div>\n</div> */\n\n.progress {\n    width: 400px;\n    height: 15px;\n    border: 1px solid #ccc;\n    background-color: #eee;\n    overflow: hidden;\n}\n.color {\n    width: 0;\n    height: 100%;\n    background: #06B026 no-repeat;\n    background-image: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);\n    background-size: 100px;\n    animation: pro 20s forwards, light 3s linear infinite;\n}\n@keyframes pro {\n    to { width: 100%; }\n}\n@keyframes light {\n    0% { background-position-x: -100px; }\n    40% { background-position-x: -100px; }\n    100% { background-position-x: calc(100% + 100px); }\n}\n··\n\n#### 改变变量让渐变动画\n\n··css\n/* <div class="box">\n    <div class="circle"></div>\n    <div class="text"></div>\n</div> */\n\n.box {\n    width: 200px;\n    height: 200px;\n}\n.circle {\n    height: 100%;\n    border-radius: 50%;\n    background-image: radial-gradient(#fff 50%, transparent 50%),\n                        conic-gradient(from 180deg, transparent 160deg, #f08, #f00, transparent 200deg),\n                        conic-gradient(#f00 20deg, #f80, #fe0, #0e0, #0cc, #08f, #80f, #f08 340deg);\n    mask-image: conic-gradient(#000 calc(3.6deg * var(--n)), transparent calc(3.6deg * var(--n)));\n    -webkit-mask-image: conic-gradient(#000 calc(3.6deg * var(--n)), transparent calc(3.6deg * var(--n)));\n}\n.text {\n    transform: translateY(-100%);\n    line-height: 200px;\n    text-align: center;\n    font-size: 24px;\n}\n.text::after {\n    counter-reset: n var(--n);\n    content: counter(n);\n}\n.circle, .text {\n    animation: seed 10s linear infinite alternate;\n}\n@keyframes seed {\n    0%{--n:0}1%{--n:1}2%{--n:2}3%{--n:3}4%{--n:4}5%{--n:5}6%{--n:6}7%{--n:7}8%{--n:8}9%{--n:9}10%{--n:10}\n    11%{--n:11}12%{--n:12}13%{--n:13}14%{--n:14}15%{--n:15}16%{--n:16}17%{--n:17}18%{--n:18}19%{--n:19}20%{--n:20}\n    21%{--n:21}22%{--n:22}23%{--n:23}24%{--n:24}25%{--n:25}26%{--n:26}27%{--n:27}28%{--n:28}29%{--n:29}30%{--n:30}\n    31%{--n:31}32%{--n:32}33%{--n:33}34%{--n:34}35%{--n:35}36%{--n:36}37%{--n:37}38%{--n:38}39%{--n:39}40%{--n:40}\n    41%{--n:41}42%{--n:42}43%{--n:43}44%{--n:44}45%{--n:45}46%{--n:46}47%{--n:47}48%{--n:48}49%{--n:49}50%{--n:50}\n    51%{--n:51}52%{--n:52}53%{--n:53}54%{--n:54}55%{--n:55}56%{--n:56}57%{--n:57}58%{--n:58}59%{--n:59}60%{--n:60}\n    61%{--n:61}62%{--n:62}63%{--n:63}64%{--n:64}65%{--n:65}66%{--n:66}67%{--n:67}68%{--n:68}69%{--n:69}70%{--n:70}\n    71%{--n:71}72%{--n:72}73%{--n:73}74%{--n:74}75%{--n:75}76%{--n:76}77%{--n:77}78%{--n:78}79%{--n:79}80%{--n:80}\n    81%{--n:81}82%{--n:82}83%{--n:83}84%{--n:84}85%{--n:85}86%{--n:86}87%{--n:87}88%{--n:88}89%{--n:89}90%{--n:90}\n    91%{--n:91}92%{--n:92}93%{--n:93}94%{--n:94}95%{--n:95}96%{--n:96}97%{--n:97}98%{--n:98}99%{--n:99}100%{--n:100}\n}\n··\n\n## 计算\n\n### --*\n\n定义 CSS 变量，即预先定义好任意的 CSS 属性，通过·var(--*)·读取变量\n\n··css\n:root {\n    --c: #08f;\n    --bgc: #f00;\n    --textC: var(--c);\n}\n.demo {\n    color: var(--c);\n    background-color: var(--bgc);\n}\n··\n\n如果变量是字符串则可以和其他字符串拼接：\n\n··css\n.foo {\n    --bar: \'hello\';\n    --foo: var(--bar)\' world\';\n}\n··\n\n如果变量是数值则需要借助·calc()·连接：\n\n··css\n.foo {\n    --gap: 20;\n    margin-top: var(--gap)px; /* 无效 */\n}\n.foo {\n    --gap: 20;\n    margin-top: calc(var(--gap) * 1px); /* 有效 */\n}\n··\n\n**注意**：\n\n!!\n变量必须写在 CSS 样式·{}·里面\n属性名不能使用变量，\n命名由·a-z A-Z 0-9 _ -·，还可以是中文或其他语言，开头可以是任意规范字符\n变量的大小写敏感，例如·--color·和·--Color·是两个不同变量\n作用域和选择器的范围一样，所以为了确保所有选择器都可以读取，一般放在根元素·:root·\n!!\n\n### var()\n\n读取 CSS 变量，可以传入第二个参数表示若变量不存在使用此默认值\n注意，若第二个参数不处理内部的逗号或空格，即第二参数不管写的是什么，都将看作一个值，例如：\n\n··css\ndiv {\n    var(--font-family, "Roboto", "Helvetica");\n    var(--margin, 10px 15px 20px);\n}\n··\n\n对于已有的变量，只要语法正确都会应用，然后再说有没有效：\n\n··css\nbody {\n    --color: 20px;\n    background-color: var(--color, #000); /* 背景色设置 20px 无效，所以仍是透明 */\n}\n··\n\n### counter-reset\n\n计数器命名：·counter-reset: <counter-name> <integer>·，可以命名多个以空格隔开，通过·counter()·获取计数器的结果\n\n!!\n<counter-name>：计数器名称，由·a-z A-Z 0-9 _ -·组成，不能以数字或双横线开头，大小写敏感\n<integer>[0]：初始值\n!!\n\n··css\n.demo::before {\n    counter-reset: demo;\n    content: counter(demo); /* 0 */\n}\n.demo::after {\n    counter-reset: one 1 two 2 three;\n}\n··\n\n### counter-increment\n\n计数器递增：·counter-increment: <counter-name> <integer>·，可以使用多个计数器递增以空格隔开\n注意，若元素设置了·display:none;·则不会递增\n\n!!\n<counter-name>：要递增的计数器名称\n<integer>[1]：每次增加的值\n!!\n\n··css\n.demo::before {\n    counter-reset: demo;\n    counter-increment: demo; /* 每定义一次就增加 */\n    content: counter(demo); /* 1 */\n}\n.demo::after {\n    counter-increment: demo -1; /* 减 1 */\n}\n··\n\n计数器递增每个元素使用一次，作用范围和选择器一样\n\n··css\n.demo {\n    counter-reset: demo;\n}\n.demo::before, .demo::after {\n    counter-increment: demo;\n    content: counter(demo);\n}\n/* ::before 显示 1 */\n/* ::after 显示 2 */\n··\n\n### counter()\n\n获取计数器的结果：·counter(<counter-name>, <counter-style>)·\n\n!!\n<counter-name>：要获取的计数器名称\n<counter-style>[decimal]：计数值样式，参考 [list-style-type](https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type#%E5%8F%96%E5%80%BC)，例如递增英文字母或罗马数字\n!!\n\n··css\n.demo {\n    counter-reset: demo;\n}\n.demo::before, .demo::after {\n    counter-increment: demo;\n    content: counter(demo, lower-latin);\n}\n/* ::before 显示 a */\n/* ::after 显示 b */\n··\n\n作用范围和选择器类似，如果同级重名的计数器则每次都从新开始，如果不同级重名的计数器则互不干扰：\n\n··html\n<style>\n    ol {\n        counter-reset: demo;\n        list-style-type: none;\n    }\n    li::before {\n        counter-increment: demo;\n        content: counter(demo);\n    }\n</style>\n\n<ol>\n    <li></li>\n    <li></li>\n</ol>\n<ol>\n    <li></li>\n    <li></li>\n</ol>\n/*\n1\n2\n1\n2\n*/\n\n<ol>\n    <li>\n        <ol>\n            <li></li>\n            <li></li>\n        </ol>\n    </li>\n    <li></li>\n</ol>\n/*\n1\n    1\n    2\n2\n*/\n··\n\n### counters()\n\n嵌套计数：·counters(<counter-name>, <counter-string>, <counter-style>)·\n\n!!\n<counter-name>：要获取的计数器名称\n<counter-string>：嵌套分隔符\n<counter-style>[decimal]：计数值样式，参考·counter()·\n!!\n\n··html\n<style>\n    ol {\n        counter-reset: demo;\n        list-style-type: none;\n    }\n    li::before {\n        counter-increment: demo;\n        content: counters(demo, \'.\');\n    }\n</style>\n\n<ol>\n    <li>\n        <ol>\n            <li>\n                <ol>\n                    <li></li>\n                    <li></li>\n                </ol>\n            </li>\n            <li></li>\n        </ol>\n    </li>\n    <li></li>\n</ol>\n/*\n1\n    1.1\n        1.1.1\n        1.1.2\n    1.2\n2\n*/\n··\n\n## 小技巧\n\n### 水平垂直居中定宽高\n\n[参考](https://segmentfault.com/a/1190000016389031)，此部分代码为公共部分：\n\n··html\n<div class="box">\n    <div class="item size">居中</div>\n</div>\n\n<style>\n    .box {\n        border: 2px solid #000;\n        width: 300px;\n        height: 300px;\n    }\n    .item {\n        color: #fff;\n        background: #f08;\n        font-weight: bold;\n    }\n    .size {\n        width: 100px;\n        height: 100px;\n        line-height: 100px;\n        text-align: center;\n    }\n</style>\n··\n\n·absolute + 负 margin·：\n\n··css\n.box {\n    position: relative;\n}\n.item {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-left: -50px;\n    margin-top: -50px;\n}\n··\n\n·absolute + margin auto·：\n\n··css\n.box {\n    position: relative;\n}\n.item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n··\n\n·absolute + calc·：\n\n··css\n.box {\n    position: relative;\n}\n.item {\n    position: absolute;\n    top: calc(50% - 50px);\n    left: calc(50% - 50px);\n}\n··\n\n### 水平垂直居中不定宽高\n\n此部分代码为公共部分，去掉了宽高其他和上面一样：\n\n··html\n<div class="box">\n    <div class="item">居中</div>\n</div>\n\n<style>\n    .box {\n        border: 2px solid #000;\n        width: 300px;\n        height: 300px;\n    }\n    .item {\n        color: #fff;\n        background: #f08;\n        font-weight: bold;\n    }\n</style>\n··\n\n·absolute + transform·：\n\n··css\n.box {\n    position: relative;\n}\n.item {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n··\n\n·flex·：\n\n··css\n.box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n··\n\n·grid·：\n\n··css\n.box {\n    display: grid;\n    justify-items: center;\n    align-items: center;\n}\n··\n\n·子元素设为 inline-block·：\n\n··css\n.box {\n    line-height: 300px;\n    text-align: center;\n}\n.item {\n    display: inline-block;\n    line-height: initial;\n}\n··\n\n·父元素设置 display: table-cell·（table 布局特性）：\n\n··css\n.box {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n.item {\n    display: inline-block;\n}\n··\n\n·writing-mode·（让文字以垂直方向排列，同时改变 css 方向，例如·text-align·）：\n\n··html\n<div class="box">\n    <div class="box-inner">\n        <div class="item">居中</div>\n    </div>\n</div>\n\n<style>\n    .box {\n        writing-mode: vertical-lr; /* 子元素垂直居中 */\n        text-align: center;\n    }\n    .box-inner {\n        writing-mode: horizontal-tb; /* 子元素水平居中 */\n        display: inline-block;\n        width: 100%;\n    }\n    .item {\n        display: inline-block;\n    }\n</style>\n··\n\n### 文字超出省略\n\n#### 单行超出省略\n\n··css\ndiv {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n··\n\n#### 多行超出省略，适用于 WebKit 内核浏览器和移动端\n\n··css\ndiv {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n··\n\n### 超出行数的显示隐藏\n\n仿微信朋友圈，每段文字最多展示 5 行，若有多出的文字则显示“全文”按钮，点击可查看全文\n全文按钮只在文字超过 5 行时显示，所以要先判断文字是否超出了 5 行，即判断高度\n注意由于 js 的执行晚于 dom 渲染，如果直接判断会造成超出的文字出现一下又消失，所以超出的文字开始是隐藏的\n\n··html\n<div class="text">\n    <p>明月几时有，把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</p>\n</div>\n\n<style>\n    .text {\n        width: 100px;\n        max-height: 100px;\n        overflow: hidden;\n    }\n    .text.active {\n        max-height: none;\n    }\n    p {\n        width: 100px;\n        line-height: 20px; /* 父容器的高是行高的 5 倍 */\n        margin: 0;\n    }\n    a {\n        color: #08f;\n        cursor: pointer;\n    }\n</style>\n\n<script>\n    // 这里使用了 jQuery\n    if ($(\'p\').height() > 100) $(\'.text\').after(\'<a>全文</a>\')\n    $(\'a\').click(function () {\n        $(\'.text\').toggleClass(\'active\').hasClass(\'active\')\n            ? $(this).text(\'收起\')\n            : $(this).text(\'全文\')\n    })\n&lt;/script>\n··\n\n&2019/8/8\n            '}}},o=i,s=t("2877"),l=Object(s["a"])(o,a,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d2218b1.cb044a33.js.map