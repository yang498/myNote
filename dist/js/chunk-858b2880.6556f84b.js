(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-858b2880"],{"49da":function(n,e,t){n.exports=t.p+"img/interview02.e364a6b2.jpg"},a6ac:function(n,e,t){"use strict";t.r(e);var a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},i=[],r=(t("99af"),t("fc57")),s=t.n(r),d=t("49da"),c=t.n(d),o={data:function(){return{text:"\n# 面试\n\n## 浏览器\n\n### w3c 规范\n\n所有的标签都使用小写字母，成对出现，单标签要自闭合\n\n### 性能优化\n\n!!\n1、将脚本放在底部，让网页先显示出来\n2、http 请求流程简述：\n    在浏览器中输入网址并搜索，浏览器就与这个 URL 指向的服务器建立连接\n    然后向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息\n    浏览器接收到来自服务器的应答信息后，对这些数据解释执行\n    而当我们请求的网页文件中有很多图片、CSS、JS 等信息时，将会频繁的与服务器建立连接\n        所以要减少 http 请求次数，比如图片做成雪碧图，代码、图片压缩\n3、网站的静态资源比如 css、js 和图片使用 CND 分发\n4、减少对 dom 的直接操作，获取 dom 时把它存在变量里面\n5、改变 class 类名而不直接操作 style\n6、代码精简，避免无意义的代码占资源\n7、使用 get 完成 ajax 请求，缓存请求的数据在本地\n8、可以用·transform: translateZ(0)·来开启硬件加速\n!!\n\n··js\n// header初始化：下边框白块，皮肤\n$headerMenuActive.append('<i></i>').find(li[data-href=]).addClass('active')\nvar a = /ab\\/c/g\n$headerMenu.on({\n    'mouseenter': function() {\n        if(/[^]*/g.test(a)) {\n            let move = $(this).index() - $headerMenuActive.index()\n            $headerMenuActive.find('i').css('transform', 'translateX(100%)')\n        } else {\n            return false\n        }\n    },\n    'mouseleave': function() {\n        $headerMenuActive.find('i').removeAttr('style')\n    }\n})\n··\n\n··js\n// header初始化：下边框白块，皮肤\n$headerMenuActive.append('<i></i>').find(li[data-href=]).addClass('active')\n··\n\n··js\n$headerMenu.on({\n    'mouseenter': function() {\n        let move = $(this).index() - $headerMenuActive.index()\n        $headerMenuActive.find('i').css('transform', 'translateX(100%)')\n    },\n    'mouseleave': function() {\n        $headerMenuActive.find('i').removeAttr('style')\n    }\n})\n··\n\n## http\n\n### http 请求\n\n计算机通过网络进行通信的规则，也就是客户端向服务端请求数据和服务，一种无状态的协议：不建立持久的连接，客户\n端发送一次请求然后服务端返回信息，接着连接就关闭了，这个过程没有记忆，所以每次都要重新传递。\n\n### 请求共7个步骤\n\n!!\n1、建立TCP连接\n2、浏览器向服务器发送请求命令\n3、浏览器发送请求头信息\n4、服务器做出应答\n5、服务器发送应答头信息\n6、服务器向浏览器发送数据\n7、服务器关闭TCP连接\n!!\n\n### 请求由4部分组成\n\n!!\n1、请求的方法，是get还是post\n2、请求的url地址\n3、请求头，包含客户端环境信息、身份验证信息等\n4、请求体，可以是提交的字符串或表单信息，和请求头隔一行，表示请求头已结束\n!!\n\n![700](".concat(s.a,")\n\n### 响应由3部分组成\n\n!!\n1、一个数字和文字组成的状态码，表示请求成功还是失败\n2、响应头，比如服务器类型、时间日期、类型和长度等\n3、响应体，也就是响应正文，由服务器传过来的数据，也是要和响应头空一行\n!!\n\n![300](").concat(c.a,")\n\n### 状态码\n\n!!\n1XX：信息类，收到web浏览器请求，正在进一步处理中\n2XX：成功，比如200 OK\n3XX：失败或重定向\n4XX：客户端请求错误，比如403资源不可用，服务器拒绝了，404 Not Found\n5XX：服务器错误，不能完成对请求的处理\n!!\n\n&2017/8/1（面试上了，不搞了🛴🙃\n")}}},u=o,f=t("2877"),l=Object(f["a"])(u,a,i,!1,null,null,null);e["default"]=l.exports},fc57:function(n,e,t){n.exports=t.p+"img/interview01.f769afc6.jpg"}}]);
//# sourceMappingURL=chunk-858b2880.6556f84b.js.map