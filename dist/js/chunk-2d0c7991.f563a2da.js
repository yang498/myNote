(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c7991"],{"50ff":function(n,a,t){"use strict";t.r(a);var h=function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},M=[],o={data:function(){return{text:"\n# math\n\n## 概述\n\n·Math·对象提供数学运算功能，不是构造函数，只有属性和静态方法\n\n## 属性\n\n!!\nMath.E：常数  e\nMath.LN2：2 的自然对数\nMath.LN10：10 的自然对数\nMath.LOG2E：以 2 为底的 e 的对数\nMath.LOG10E：以 10 为底的 e 的对数\nMath.PI：常数 Pi\nMath.SQRT1_2：0.5 的平方根\nMath.SQRT2：2 的平方根\n!!\n\n··js\nMath.E // 2.718281828459045\nMath.LN2 // 0.6931471805599453\nMath.LN10 // 2.302585092994046\nMath.LOG2E // 1.4426950408889634\nMath.LOG10E // 0.4342944819032518\nMath.PI // 3.141592653589793\nMath.SQRT1_2 // 0.7071067811865476\nMath.SQRT2 // 1.4142135623730951\n··\n\n## 常用方法\n\n!!\nMath.ceil()：向上取整\nMath.floor()：向下取整\nMath.max()：最大值\nMath.min()：最小值\nMath.round()：四舍五入\nMath.random()：0 到 1 之间的随机数，大于等于 0，小于 1\n!!\n\n··js\nMath.ceil(3.2) // 4\nMath.ceil(-3.2) // -3\n\nMath.floor(3.2) // 3\nMath.floor(-3.2) // -4\n\nMath.max(2, -1, 5) // 5\nMath.min(2, -1, 5) // -1\n\nMath.round(0.1) // 0\nMath.round(0.5) // 1\nMath.round(-1.1) // -1\nMath.round(-1.5) // -1 （负数时五是舍去）\nMath.round(-1.6) // -2\n··\n\n### Math.random()\n\n··js\n// 生成任意范围的随机数\nconst random = (min, max) => Math.random() * (max - min) + min\nrandom(1.5, 6.5) // 2.4942810038223864\n\n// 生成任意范围的随机整数\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\nrandomInt(1, 6) // 5\n\n// 返回任意长度的随机字符串\nconst randomStr = len => {\n    const STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n                'abcdefghijklmnopqrstuvwxyz' +\n                '0123456789-_'\n    let str = ''\n    for (let i = 0; i < len; i++) str += STR[Math.floor(Math.random() * STR.length)]\n    return str\n}\nrandomStr(6) // \"shift\"\n··\n\n## 不常用方法\n\n!!\nMath.abs()：绝对值\nMath.pow()：指数运算\nMath.sqrt()：平方根\nMath.log()：自然对数\nMath.exp()：e 的参数次方\n!!\n\n··js\nMath.abs(1) // 1\nMath.abs(-1) // 1\n\n// 等同于 2 ** 3\nMath.pow(2, 3) // 8\n\nMath.sqrt(4) // 2\nMath.sqrt(-4) // NaN\n\nMath.log(Math.E) // 1\nMath.log(10) // 2.302585092994046\n\nMath.exp(1) // 2.718281828459045\nMath.exp(3) // 20.085536923187668\n··\n\n## 三角函数方法\n\n!!\nMath.sin()：返回参数的正弦（参数为弧度值）\nMath.cos()：返回参数的余弦（参数为弧度值）\nMath.tan()：返回参数的正切（参数为弧度值）\nMath.asin()：返回参数的反正弦（返回值为弧度值）\nMath.acos()：返回参数的反余弦（返回值为弧度值）\nMath.atan()：返回参数的反正切（返回值为弧度值）\n!!\n\n## es6 方法\n\n!!\nMath.trunc()：取整数部分\nMath.sign()：判断返回：正数·+1·、负数·-1·、0·0·、-0·-0·、其他·NaN·\nMath.cbrt()：立方根\nMath.clz32()：计算一个数的 32 位二进制形式的前导 0 的个数\nMath.imul()：两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数\nMath.fround()：返回一个数的 32 位单精度浮点数形式\nMath.hypot()：所有参数的平方和的平方根\nMath.expm1()：e 的参数次方 - 1，即·Math.exp(x) - 1·\nMath.log1p()：1 + 参数的自然对数，即·Math.log(1 + x)·，如果参数小于 -1 返回·NaN·\nMath.log2()：以 2 为底的参数的对数。如果参数小于 0 返回 NaN\nMath.log10()：以 10 为底的参数的对数。如果参数小于 0 返回 NaN\n!!\n\n··js\nMath.trunc(-4.9) // -4\nMath.trunc(-0.1234) // -0\n\nMath.sign(-5) // -1\nMath.sign(5) // +1\nMath.sign(0) // +0\nMath.sign(-0) // -0\nMath.sign(NaN) // NaN\n\nMath.cbrt(8) // 2\n\nMath.clz32(0) // 32，0 的二进制形式全为 0，所以有 32 个前导 0\nMath.clz32(1) // 31\nMath.clz32(0b01000000000000000000000000000000) // 1\n// 左移运算符 << 与 Math.clz32 方法直接相关，相当于 32 减参数之和\n// << 是用来将一个数的各二进制位全部左移若干位，例如 8 << n 的值为 8 * (2^n)\nMath.clz32(1 <¿< 1) // 30\nMath.clz32(1 <¿< 2) // 29\n\nMath.imul(2, 4) // 8\n\n// 未丢失有效精度\nMath.fround(1.125) // 1.125\nMath.fround(7.25)  // 7.25\n// 丢失精度\nMath.fround(0.3)   // 0.30000001192092896\nMath.fround(0.7)   // 0.699999988079071\nMath.fround(1.0000000123) // 1\n\nMath.hypot(3, 4) // 5\nMath.hypot(3, 4, 5) // 7.0710678118654755\n··\n\n## es6 三角函数方法\n\n!!\nMath.sinh()：返回参数的双曲正弦\nMath.cosh()：返回参数的双曲余弦\nMath.tanh()：返回参数的双曲正切\nMath.asinh()：返回参数的反双曲正弦\nMath.acosh()：返回参数的反双曲余弦\nMath.atanh()：返回参数的反双曲正切\n!!\n\n## 指数运算符\n\nES2016 新增了一个指数运算符·**·\n\n··js\n2 ** 2 // 4\n2 ** 3 // 8\n··\n\n当多个连用时从右边开始计算\n\n··js\n2 \\** 3 ** 0\n// 相当于\n2 \\** (3 ** 0)\n··\n\n指数运算符可以与等号结合·**=·\n\n··js\na **= 3\n// 等同于\na = a ** 3\n··\n\n&2019/4/3\n"}}},r=o,s=t("2877"),l=Object(s["a"])(r,h,M,!1,null,null,null);a["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0c7991.f563a2da.js.map