(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d212b79"],{aa36:function(n,e,t){"use strict";t.r(e);var r=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},s=[],a={data:function(){return{text:"\n# js 工具\n\n## js-xlsx\n\n### 介绍\n\n读取和导出 excel 的工具库，支持·xlsx·、·xls·等多种表格格式\n由于表格的数据是以二进制保存的，所以会以二进制形式读取或导出\n[github](https://github.com/SheetJS/js-xlsx)，[官网](https://sheetjs.com)，安装：\n\n··bash\nnpm i xlsx\n··\n\ndist 目录下的·xlsx.core.min.js·为精简版，·xlsx.full.min.js·为完整版\n引入 js 后将会产生·XLSX·这个全局变量：\n\n!!\nXLSX.read(excel)：读取表格返回表格对象\n    data：表格数据\n    option {Object}：配置\n        type {String}：读取方式，可选：\n            ·array·(8位无符号数组)、·base64·、·binary·、·buffer·、·string·、·file·(node 环境支持)\n\nxlsx.write(workBook, option)：转换成表格格式的字符串数据\n\nXLSX.utils：转换工具\n    XLSX.utils.sheet_to_json(sheet)：生成 json 格式，即数组对象，第一行为 key，第二行开始为 value\n    XLSX.utils.sheet_to_html(sheet)：生成 html 格式，注意是以·<html></html>·作为起始和结束的\n    XLSX.utils.sheet_to_csv(sheet)：生成 csv 格式，以逗号分隔的文本\n    XLSX.utils.sheet_to_txt(sheet)：生成 txt 格式，以 tab 分隔的文本\n\n    XLSX.utils.json_to_sheet(data)：将数组对象转成 sheet\n    XLSX.utils.aoa_to_sheet(data)：将二维数组转成 sheet\n    XLSX.utils.table_to_sheet(data)：将·<table>·元素转成 sheet\n\n    XLSX.utils.book_new()：创建一个空的工作簿对象\n    XLSX.utils.book_append_sheet(workBook, workSheet, sheetName)：给工作簿添加一个工作表\n!!\n\n### XLSX.read()\n\n·XLSX.read(data [, options])·：读取表格\n\n··js\n// <input id=\"file\" type=\"file\"/>\n\nconst [$, { log }] = [document.querySelector.bind(document), console]\n$('#file').onchange = function () {\n    if (this.files[0]) {\n        const reader = new FileReader()\n        reader.readAsBinaryString(this.files[0])\n        reader.onload = () => {\n            const excel = XLSX.read(reader.result, { type: 'binary' })\n            log(excel)\n        }\n    }\n}\n··\n\n返回的·excel·对象包含了表格的所有信息，主要看·excel.SheetNames·和·excel.Sheets·属性\n·SheetNames·是所有·sheet·名字组成的数组\n·Sheets·是所有 sheet 组成的对象，所以通过·SheetNames·可以获取指定的 sheet\n·Sheets·中的主要属性：\n\n!!\n\\!ref {String}：当前表的范围，例如·A1:H8·\n\\!merges {Array}：单元格合并的信息\n    例如·[{s: {c: 0, r: 1}, e: {c: 0, r: 4}}]·，表示有 1 个合并单元格，范围是·A2~A5·\n    s {Object}：(start) 起始\n    e {Object}：(end) 结束\n        c {Number}：(column) 列，从 0 开始，即 0 代表 A，1 代表 B，以此类推\n        r {Number}：(row) 行，从 0 开始，即 0 代表 1，1 代表 2，以此类推\nA1... {Object}：每个单元格，若是合并的单元格只显示起始的子单元格，主要的属性有：\n    v {String}：原始值\n    t {String}：类型，·b·(Boolean)，·e·(Error)，·n·(Number)，·d·(Date)，·s·(Text)，·z·(Stub)\n    f {String}：公式\n    r {String}：富文本\n    h {String}：HTML 类型富文本\n    l {String}：单元格超链接对象\n!!\n\n### XLSX.utils\n\n·XLSX.utils.sheet_to_*·：读取表格后将表格转换为可视对象\n\n··js\n// <input id=\"file\" type=\"file\"/>\n\nconst [$, { log }] = [document.querySelector.bind(document), console]\n$('#file').onchange = function () {\n    if (this.files[0]) {\n        const reader = new FileReader()\n        reader.readAsBinaryString(this.files[0])\n        reader.onload = () => {\n            const excel = XLSX.read(reader.result, { type: 'binary' })\n            const sheet1 = excel.Sheets[excel.SheetNames[0]]\n            log(XLSX.utils.sheet_to_json(sheet1))\n            log(XLSX.utils.sheet_to_html(sheet1))\n        }\n    }\n}\n··\n\n·XLSX.utils.*_to_sheet·：将 js 数据转换为表格数据，通常用于下载\n\n··js\n// <button>下载表格</button>\n\nconst [$, { log }] = [document.querySelector.bind(document), console]\n\n// String 转 ArrayBuffer\nconst SToAB = str => {\n    let buf = new ArrayBuffer(str.length)\n    let view = new Uint8Array(buf)\n    for (let i = 0; i != str.length; i++) view[i] = str.charCodeAt(i) & 0xFF\n    return buf\n}\n\n$('button').onclick = function () {\n    // 下载的数据\n    const arr = [\n        ['姓名',  '性别', '年龄', '注册时间'],\n        ['李雷',   '男',   22,    new Date],\n        ['韩梅梅', '女',   20,    new Date]\n    ]\n    // 转换成表对象，格式和 XLSX.utils.sheet_to_json 返回的一样\n    const excel = {\n        SheetNames: ['sheet1'],\n        Sheets: {\n            sheet1: XLSX.utils.aoa_to_sheet(arr)\n        }\n    }\n    // 转换成表格格式的字符串数据\n    const data = XLSX.write(excel, { bookType: 'xlsx', type: 'binary' })\n    // 转换成可下载的 blob 对象\n    const type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    const url = URL.createObjectURL(new Blob([SToAB(data)], { type }))\n    // 用 a 链接下载\n    const a = document.createElement('a')\n    a.href = url\n    a.download = '用户表'\n    a.click()\n}\n··\n\n## async-validator\n\n本文档记录版本：·v3.3.0·\n\n### 概述\n\n表单异步验证，github: [async-validator](https://github.com/yiminghe/async-validator)\n\n安装：\n\n··bash\nnpm i async-validator -S\n··\n\n### 基本使用\n\n这里使用了 Vue 的方式：\n\n··html\n<template>\n    <div>\n        <input v-model=\"form.name\">\n        <p>{{ message.name }}</p>\n        <input v-model=\"form.age\">\n        <p>{{ message.age }}</p>\n        <button @click=\"submit\">submit</button>\n    </div>\n</template>\n··\n\n··js\nimport Schema from 'async-validator'\nlet validator = null\nexport default {\n    data () {\n        return {\n            // 表单对象\n            form: {\n                name: '张三',\n                age: '18'\n            },\n            // 校验规则\n            rules: {\n                name: { // 一条校验规则\n                    required: true,\n                    message: '姓名为必填项'\n                },\n                age: [ // 多条校验规则\n                    {\n                        required: true,\n                        message: '年龄为必填项'\n                    },\n                    {\n                        validator (rule, value, callback) {\n                            value < 18\n                                ? callback(new Error('未成年人不符合条件'))\n                                : callback()\n                        }\n                    }\n                ]\n            },\n            // 错误提示\n            message: {\n                name: '',\n                age: ''\n            }\n        }\n    },\n    created () {\n        // 实例化构造函数表示创建一个校验器，参数为校验规则对象\n        validator = new Schema(this.rules)\n    },\n    methods: {\n        // 提交\n        submit () {\n            this.clearMessage()\n            validator.validate(this.form, {\n                firstFields: true\n            }).then(() => {\n                // 校验通过\n                console.log('ok')\n            }).catch(({ errors }) => {\n                // 校验未通过\n                // 显示错误信息\n                for (let { field, message } of errors) this.message[field] = message\n            })\n        },\n        // 清空校验错误提示\n        clearMessage () {\n            for (let key in this.message) this.message[key] = ''\n        }\n    }\n}\n··\n\n### rules\n\n校验规则，每个校验属性对应要校验的表单对象\n\n!!\ntype {String}：内置校验类型，可选值如下\n    string：必须是 string 类型，默认类型\n    number：必须是 number 类型\n    boolean：必须是 boolean 类型\n    method：必须是 function 类型\n    regexp：必须是 regexp 类型\n    integer：必须是整数类型\n    float：必须是浮点数类型\n    array：必须是 array 类型\n    object：必须是 object 类型\n    enum：必须出现在 ·enmu· 指定的值中\n    date：必须是 date 类型\n    url：必须是 url 类型\n    hex：必须是 16 进制类型\n    email：必须是 email 类型\n    any：任意类型\nrequired {Boolean}：是否必填\npattern {Regexp}：需要符合的正则\nmin {Number}：最小值，对于字符串和数组会与 ·length· 比较，对于数字会直接与值比较\nmax {Number}：最大值，比较规则同上\nlen {Number}：指定长度，比较规则同上，优先级高于 ·min· 和 ·max·\nenum {Array}：指定的值，配合 ·type: 'enum'· 使用\nwhitespace {Boolean}：是否值不能都是空格\nfields {Object}：嵌套规则，必须在父规则上指定 ·required·，否则不会校验\ndefaultField {Object/Array}：·fields· 属性的扩展，校验 ·object· 和 ·array· 类型中所有的值\ntransform {Function}：校验前对值进行转换，函数的参数为当前值，返回值为改变后的值\nmessage：校验提示信息，可以任意类型，例如 string、JSX、函数的返回值\nvalidator {Function}：自定义校验函数，参数依次如下\n    rule：当前校验字段在 rules 中所对应的校验规则\n    value：当前校验字段的值\n    callback：校验完成时的回调，传入 ·Error· 或 ·ErrorArray· 表示校验失败，不传即为成功\n        如果校验是同步的直接返回 ·false· 或 ·Error/ErrorArray· 也可以\n    source：校验对象\n    options：配置项，属性如下\n        messages：校验错误提示信息，会被合并到默认的提示信息中\nasyncValidator {Function}：自定义异步校验函数，参数同 ·validator·\n!!\n\n### validate 方法\n\n校验方法：\n\n··js\nfunction (source, [options], callback): Promise\n··\n\n!!\nsource {Object}：需要校验的对象\noptions {Object}：配置项\n    first {Boolean}：第一个未通过校验的字段发生错误就调用 ·callback·，即不再继续校验剩余字段\n    firstFields {Boolean/StringArray}：多条校验规则的配置\n        Boolean：每个字段的第一个规则发生错误就调用 ·callback·，即不再继续校验该字段的剩余规则\n        StringArray：指定字段的第一个规则发生错误就调用 ·callback·\n    suppressWarning {Boolean}：是否禁止无效值的内部警告\ncallback(errors, fields) {Function}：校验完成时的回调，若 ·errors· 存在表示校验失败，否则校验成功\n!!\n\n返回的 Promise：\n\n!!\nthen()：校验通过的回调\ncatch({ errors, fields })：校验失败的回调\n    errors {Array}：所有校验错误的 ·Error· 数组\n    fields {Object}：所有校验错误的对象，键名为校验字段名，键值为 ·Error· 数组\n!!\n\n### messages 方法\n\n·async-validator· 内部有些内置常用的英语校验提示，如果不指定校验规则中的 ·message·，默认就是使用内置的英语提示\n使用 ·messages· 方法可以自定义默认校验提示，·%s· 为校验的字段名，所有可修改的字段见项目源码 ·src/messages.js·\n\n··js\nvalidator.messages({\n    required: '%s 必填'\n})\n··\n\n### FAQ\n\n#### 如何关闭校验错误时的控制台警告\n\n··js\nSchema.warning = () => {}\n··\n\n#### 如何校验值为 true\n\n··js\n{\n  type: 'enum',\n  enum: [true]\n}\n··\n\n&2020/06/27\n            "}}},o=a,l=t("2877"),i=Object(l["a"])(o,r,s,!1,null,null,null);e["default"]=i.exports}}]);
//# sourceMappingURL=chunk-2d212b79.ca290bc1.js.map