{"version":3,"sources":["webpack:///./src/pages/article/database/sql.vue?d381","webpack:///src/pages/article/database/sql.vue","webpack:///./src/pages/article/database/sql.vue?d0a1","webpack:///./src/pages/article/database/sql.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","domProps","_s","format","text","staticRenderFns","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,SAAS,CAAC,UAAYN,EAAIO,GAAGP,EAAIQ,OAAOR,EAAIS,WAClJC,EAAkB,GCItB,GACE,KADF,WAEI,MAAJ,CACM,KAAN,q8KCR2W,I,YCOvWC,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAC,E","file":"js/chunk-2d0d6f35.22108e9c.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{domProps:{\"innerHTML\":_vm._s(_vm.format(_vm.text))}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div v-html=\"format(text)\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data () {\r\n        return {\r\n            text: `\r\n# sql server\r\n\r\n## 概述\r\n\r\n大多数数据库使用 SQL 语句，包括：Oracle、Sybase、SQL Server、DB2、Access 等\r\nSQL 语句对大小写不敏感，例如 SELECT 等同于 select\r\n快捷用法：若运行时有光标选中将只运行选中部分的代码\r\n快捷键：\r\n\r\n!!\r\nF5 或 Alt + X 或 Ctrl + E：执行\r\nCtrl + Shift + L：将选定文本转换为小写\r\nCtrl + Shift + U：将选定文本转换为大写\r\nCtrl + R：显示隐藏结果窗格\r\nAlt + 上下键：移动当前行\r\n!!\r\n\r\n## create table\r\n\r\n创建表和表头，语法：\r\n\r\n··sql\r\ncreate table <tableName> (\r\n    column_name1 data_type(size),\r\n    column_name2 data_type(size),\r\n    column_name3 data_type(size),\r\n    ...\r\n)\r\n··\r\n\r\n例如创建用户信息表：\r\n\r\n··sql\r\ncreate table user_info (\r\n    id bigint,\r\n    name varchar(20),\r\n    age int,\r\n    sex int,\r\n    address varchar(255)\r\n)\r\n··\r\n\r\n## insert into\r\n\r\n增加数据（SQL server 中每次插入的条数不能超过 1000）\r\n第一种不指定列名，需要插入的值和表头一一对应\r\n\r\n··sql\r\ninsert into tableName values (value1, value2, value3, ...)\r\n··\r\n\r\n第二种指定列名，值和表头对应即可，若某列未插入值则会以·NULL·代替：\r\n\r\n··sql\r\ninsert into tableName (column1, column2, column3, ...)\r\nvalues (value1, value2, value3, ...)\r\n··\r\n\r\n## select\r\n\r\n### select\r\n\r\n查询列，语法：\r\n\r\n··sql\r\nselect <columnName> from <tableName>\r\n··\r\n\r\n例如：\r\n\r\n··sql\r\n/* 所有列 */\r\nselect * from table\r\n\r\n/* 单列 */\r\nselect name from table\r\n\r\n/* 多列 */\r\nselect name,age from table\r\n··\r\n\r\n### where\r\n\r\n条件查询，语法：\r\n\r\n··sql\r\nselect <columnName> from <tableName> where <columnName> <condition> <value>\r\n··\r\n\r\n·value· 需用单引号标记，数字可省略\r\n·condition· 运算符包括：\r\n\r\n!!\r\n=：等于\r\n\\\\!= 或 <>：不等于\r\n>：大于\r\n<：小于\r\n>=：大于等于\r\n<=：小于等于\r\nand：与，同时需要符合所有条件\r\nor：或，只需要符合某一条件\r\nnot：非，除了指定条件\r\nin (...)：在指定的值内\r\nbetween ... and ...：指定范围，不同数据库是否包括开头结尾可能不一致\r\nlike：指定模式，相当于正则，\r\n    %：代表 0 到多个字符\r\n    _：代表 1 个字符\r\n    \\\\[charlist]：中括号中任意一个字符\r\n    \\\\[^charlist] 或 \\\\[\\\\!charlist]：非中括号中任意单一字符\r\n    \\\\[0-9]\\\\[a-z]：中括号中使用 - 可表示范围\r\n!!\r\n\r\n例如有个 Persons 表：\r\n\r\n%%\r\n/ LastName / FirstName / Address / City / Year /\r\n/ :-: / :-: / :-: / :-: / :-: /\r\n/ Adams / John / Oxford Street / London / 1970 /\r\n/ Bush / George / Fifth Avenue / New York / 1975 /\r\n/ Carter / Thomas / Changan Street / Beijing / 1980 /\r\n/ Gates / Bill / Xuanwumen 10 / Beijing / 1985 /\r\n%%\r\n\r\n找 Beijing 城市，执行：\r\n\r\n··sql\r\nselect * from Persons where City = 'Beijing'\r\n··\r\n\r\n结果：\r\n\r\n%%\r\n/ LastName / FirstName / Address / City / Year /\r\n/ :-: / :-: / :-: / :-: / :-: /\r\n/ Carter / Thomas / Changan Street / Beijing / 1980 /\r\n/ Gates / Bill / Xuanwumen 10 / Beijing / 1985 /\r\n%%\r\n\r\n**and**：找姓为 Carter 且名为 Thomas 的人：\r\n\r\n··sql\r\nselect * from Person where FirstName = 'Thomas' **and** LastName = 'Carter'\r\n··\r\n\r\n**or**：找姓为 Carter 或名为 Thomas 的人：\r\n\r\n··sql\r\nselect * from Person where FirstName = 'Thomas' **or** LastName = 'Carter'\r\n··\r\n\r\n**and or**：\r\n\r\n··sql\r\nselect * from Person where (FirstName = 'Thomas' **or** LastName = 'Carter') **and** LastName = 'Carter'\r\n··\r\n\r\n**not**：找非北京城市的人：\r\n\r\n··sql\r\nselect * from Person where **not** city = 'Beijing'\r\n··\r\n\r\n**in**：找 London 和 New York 城市：\r\n\r\n··sql\r\nselect * from Person where city **in** ('London', 'New York')\r\n··\r\n\r\n**between and**：找 1975 到 1985 之间的年份：\r\n\r\n··sql\r\nselect * from Persons where City **between** 1975 **and** 1985\r\n··\r\n\r\n**like**：找包含 n 字母的城市：\r\n\r\n··sql\r\nselect * from Persons where City **like** '%n%'\r\n··\r\n\r\n\r\n#### 查询 null 值\r\n\r\n直接查找 null 是查不到的\r\n\r\n··sql\r\nselect * from Persons where City = null\r\n··\r\n\r\n应使用 is：\r\n\r\n··sql\r\nselect * from Persons where City is null\r\n··\r\n\r\n在 SQL 中的逻辑值除了 true 和 false 还有 unknown（未知），一般任何值与 null 比较都会返回 unknown，而 unknown 会被当作 false，即·where City = null·无结果\r\n但在 check 约束中，unknown 就会被当作 true 来处理，例如设置某个字段的值必须大于等于 0，还是可以插入 null，因为在 check 约束中·null >= 0·返回的 unknown 会被当作 true\r\n\r\n### distinct\r\n\r\n去重，语法：\r\n\r\n··sql\r\nselect distinct <columnName> from <tableName>\r\n··\r\n\r\n例如：\r\n\r\n··sql\r\nselect distinct * from tableName\r\n··\r\n\r\n### order by\r\n\r\n对结果进行排序，默认从小到大排序（asc），即 0-9，a-b，如果需要倒序则需要在最后加上·desc·，语法：\r\n\r\n··sql\r\nselect <columnName> from <tableName> order by <columnName> [asc/desc]\r\n··\r\n\r\n例如：\r\n\r\n··sql\r\n/* 排序 */\r\nselect Company, OrderNumber from Orders order by Company\r\n\r\n/* 每个相同的 Company 中再进行 OrderNumber 排序 */\r\nselect Company, OrderNumber from Orders order by Company, OrderNumber\r\n\r\n/* 倒叙 */\r\nselect Company, OrderNumber from Orders order by Company desc\r\n\r\n/* 每个相同的 Company 中再进行 OrderNumber 正序排序 */\r\nselect Company, OrderNumber from Orders order by Company desc, OrderNumber asc\r\n··\r\n\r\n### top\r\n\r\n规定要返回多少条数据，语法：\r\n\r\n··sql\r\nselect top <number/percent> <columnName> from <tableName>\r\n··\r\n\r\n例如：\r\n\r\n··sql\r\n/* 前 10 条数据 */\r\nselect top 10 * from Persons\r\n\r\n/* 前 50% 条数据（总行为单数向上取整 + 0.5） */\r\nselect top 50 percent * from Persons\r\n··\r\n\r\n## update\r\n\r\n修改数据，语法：\r\n\r\n··sql\r\nupdate <tableName> set <columnName> = <newValue> where <columnName> = <value>\r\n··\r\n\r\n也就是设置 **要改的列名 = 新值** 再找到对应的行，如果对应的行有多个也会修改多个\r\n例如：\r\n\r\n··sql\r\nupdate Person set FirstName = 'Fred' where LastName = 'Wilson' \r\n\r\n/* 修改多个 */\r\nupdate Person set Address = 'Zhongshan 23', City = 'Nanjing' WHERE LastName = 'Wilson'\r\n··\r\n\r\n## delete\r\n\r\n删除行，语法：\r\n\r\n··sql\r\ndelete from <tableName> where <columnName> = <value>\r\n··\r\n\r\n例如：\r\n\r\n··sql\r\ndelete from Person where LastName = 'Wilson'\r\n\r\n/* 删除所有行 */\r\ndelete from table_name\r\n··\r\n\r\n## alias\r\n\r\n对表名称或列名称指定别名进行操作将更易于阅读和书写\r\n重命名表：\r\n\r\n··sql\r\nselect <columnName> from <tableName> as <newName>\r\n··\r\n\r\n重命名列：\r\n\r\n··sql\r\nselect <columnName> as <newName> from <tableName>\r\n··\r\n\r\n例如有两个表分别是·Persons·和·Product_Orders·，分别指定别名·p·和·po·\r\n\r\n··sql\r\nselect po.orderId, p.name from Persons as p, Product_Orders as po where p.name = 'Tom'\r\n··\r\n\r\n不使用别名的语句是：\r\n\r\n··sql\r\nselect Product_Orders.orderId, Persons.name from Persons, Product_Orders where Persons.name = 'Tom'\r\n··\r\n\r\n\r\n## date\r\n\r\n··sql\r\n/* 计算时间戳 */\r\nselect datediff(s,'1970-01-01 00:00:00', getdate())\r\n··\r\n\r\n@@\r\n[w3school - SQL 教程](http://www.w3school.com.cn/sql/index.asp)\r\n@@\r\n\r\n&2018/9/30\r\n            `\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sql.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sql.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./sql.vue?vue&type=template&id=7dddc770&\"\nimport script from \"./sql.vue?vue&type=script&lang=js&\"\nexport * from \"./sql.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}