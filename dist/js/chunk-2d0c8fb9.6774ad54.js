(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c8fb9"],{"56ce":function(n,s,p){"use strict";p.r(s);var e=function(){var n=this,s=n.$createElement,p=n._self._c||s;return p("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},t=[],l={data:function(){return{text:"\n#起步\n##介绍\ngulp 是个前端构建工具，它充分借鉴了 unix 操作系统的管道（pipe）思想，在操作上要比同类型的 grunt 简单一点\ngulp 一般使用流程：\n!!\ntask()：创建任务\n    src()：获取文件流\n        pipe()：传输文件流，将文件流导入到需要的 gulp 插件中处理\n            pipe()：传输文件流，把处理后的文件流导入到·dest()·\n                dest()：输入处理后的文件\n    watch()：监听文件的变动执行相应的任务\n!!\n例如：\n··\nconst gulp = require('gulp') // 加载 gulp 模块\nconst sass = require('gulp-sass') // 加载 gulp-sass 模块\n\n// 创建编译 sass 任务：获取 scss 文件，以 compact 模式编译，将结果输出到 css 文件中\ngulp.task('sass', function () {\n    gulp.src('scss/*.scss')\n        .pipe(sass({outputStyle: 'compact'}))\n        .pipe(gulp.dest('css'))\n})\n\n// 监听 scss 文件，若发生改变则自动编译成 css\ngulp.task('compile', function () {\n    gulp.watch('scss/*.scss', ['sass'])\n})\n··\n\n##安装\ngulp 基于 node 环境，所以需先安装 @[node 环境|#js/node]，全局安装 gulp：\n··\ncnpm install gulp  -g\n··\n查看版本号，执行：\n··\ngulp -v\n··\n然后在需要的项目中安装 gulp：\n··\ncnpm install gulp\n··\n若需要将 gulp 写进项目 package.json 文件的依赖中则可以加上·--save-dev·：\n··\ncnpm install gulp  --save-dev\n··\n在全局安装 gulp 后又需要在项目中安装，是为了版本的灵活性和项目的独立性\n\n##gulpfile.js\n·gulpfile.js·是 gulp 工具的主文件，通常在项目的根目录，不推荐放置在其他文件夹内，不然路径要多写了\n创建任务打印 hello world：\n··\nvar gulp = require('gulp')\ngulp.task('hello', function () {\n    console.log('hello world')\n})\n··\n在存放·gulpfile.js·文件的目录下执行·gulp hello·即可运行这个任务，若不指定任务名即执行·gulp·，将会执行任务名为·default·的默认任务\n\n#API\n\n##task()\n·gulp.task(name [, deps], [, fn])·：创建任务\n!!\nname{String}：自定义任务名\ndeps{Array}：当前任务依赖的任务名，当前任务会在所有依赖的任务执行完毕后才开始执行\nfn(call){Function}：任务内容\n    call{Function}：通知当前任务完成，在异步任务中使用\n!!\n依赖的任务：\n··\ngulp.task('one', ['two', 'three', 'four'], function () {\n    // 在 two、three、four 执行完后执行\n});\n··\n注意若依赖的任务是异步的，gulp 并不会等异步任务完成，而是会接着执行后续的任务。例如：\n··\ngulp.task('one', () => {\n    setTimeout(() => {\n        console.log('one')\n    }, 1000)\n})\n\ngulp.task('two', ['one'], () => console.log('two'))\n\n// 运行 gulp two\n// two\n// one\n··\n回调通知可在异步完成之后再执行\n··\ngulp.task('one', call => {\n    setTimeout(() => {\n        console.log('one')\n        call() // 执行回调，表示这个异步任务已经完成\n    }, 1000)\n})\n\ngulp.task('two', ['one'], () => console.log('two'))\n··\n返回文件流也可在异步完成之后再执行\n··\ngulp.task('one', () => {\n    return gulp.src('*')\n        .pipe(fn()) // fn() 中有异步操作\n        .pipe(gulp.dest('dest'))\n})\n\ngulp.task('two', ['one'], () => console.log('two'))\n··\n\n##src()\n·gulp.src(globs[, options])·：读取文件\n!!\nglobs{String/Array}：文件匹配模式，可匹配文件路径和文件名\n    可使用数组的形式表示多个匹配模式，且在非第一个元素的开头加上·!·可使用排除模式，即会在匹配的结果中排除这个匹配\noptions{Object}：可选参数，通常情况下不需要用到\n    base{String}：默认值为基础路径，·dest()·有介绍\n    buffer{Boolean}[true]：·true·是以文件 buffer 的方式返回·file.contents·，否则以 stream 方式（适合大文件）返回\n    其他参数见底部官网链接\n!!\ngulp 内部使用了 @[node-glob|https://github.com/isaacs/node-glob] 模块（类似正则表达式）来实现其文件匹配功能，可使用一些特殊字符来匹配文件：\n!!\n*：匹配 0 个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾\n**：单独出现或左右是路径分隔符匹配所有目录和文件，否则只能匹配一个层级\n?：匹配 1 个字符（不会匹配路径分隔符）\n[¿]：匹配方括号中的任意一个字符，当方括号中第一个字符为·^·或·!·时，表示非方括号中的任意一个字符\n!¿(pattern|pattern|pattern)：匹配任何与括号中给定的任一模式都不匹配的\n?(pattern|pattern|pattern)：匹配括号中给定的任一模式0次或1次，类似于js正则中的·(pattern|pattern|pattern)?·\n+(pattern|pattern|pattern)：匹配括号中给定的任一模式至少1次，类似于js正则中的·(pattern|pattern|pattern)+·\n*(pattern|pattern|pattern)：匹配括号中给定的任一模式0次或多次，类似于js正则中的·(pattern|pattern|pattern)*·\n@(pattern|pattern|pattern)：匹配括号中给定的任一模式1次，类似于js正则中的·(pattern|pattern|pattern)·\n!!\n比如：\n··\n'*' // 能匹配任意格式文件和文件夹，如 a.js、x.y、abc、abc/，不能匹配 a/b.js\n'*.*' // 能匹配任意格式文件，不能匹配 x/y.z\n'*/*¿/*¿.js' // 能匹配 a/b/c.js，不能匹配 a/b.js、a/b/c/d.js\n'**' // 能匹配所有的目录和文件\n'**/*¿.js' // 能匹配所有目录下的 js 文件\n'a/*¿*/z' // 能匹配 a 目录下的所有 z 文件\n'a/**b/z' // 能匹配 a/b/z、a/ab/z，不能匹配 a/x/ab/z，因为只有 ** 单独出现才能匹配多级目录\n'?.js' // 能匹配 a.js、b.js、c.js，不能匹配 ab.js\n'a??' // 能匹配 a.b、abc，不能匹配 ab/，因为 ? 不会匹配路径分隔符\n'[xyz].js' // 只能匹配 x.js、y.js、z.js\n'[^xyz].js' // 能匹配所有非 x.js、y.js、z.js 的 js 文件\n'*.+(js|css)' // 匹配所有后缀名为 js 或 css 的文件\n\ngulp.src(['*.html', 'css/*.css', 'js/*.js']) // 多种匹配模式使用数组\ngulp.src(['*.js', '!b*.js']) // 匹配所有不是以 b 开头的 js 文件\ngulp.src(['!b*.js', '*.js']) // 排除无效，不能出现在数组的第一个元素中\n··\n\n##dest()\n·gulp.dest(path[, options])·：输出文件\n!!\npath{String/Function}：写入文件的路径目录，注意不能是文件名，否则也会当成目录，文件名随·src()·获取的文件名\noptions{Object}：可选参数，通常情况下不需要用到\n    cwd{String}[process.cwd()]：输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效\n    mode{String}[0777]：八进制权限字符，用以定义所有在输出目录中所创建的目录的权限\n    其他参数见底部官网链接\n!!\n输出的文件路径是传入的·path·参数后面再加上·src()·中有通配符开始出现的那部分路径，没有则取最后的文件名。例如：\n··\nvar gulp = reruire('gulp')\n\ngulp.src('script/*¿*/*¿.js') // 通配符部分的路径为 **/*.js\n    .pipe(gulp.dest('dist')) // 输出路径为 dist/**/*.js\n\ngulp.src('script/js/jquery.js') // 没有通配符取最后的文件名\n    .pipe(gulp.dest('dist')) // 输出路径为 dist/jquery.js\n··\n通过指定·src()·中第二个参数的·base·属性可以指定输出路径，·base·的默认值为通配符开始出现之前那部分路径\n例如·gulp.src('app/src/**/*.css')·中·base·的值为·app/src·，所以其实·dest()·传入的输出路径也就是替换了·src()·中的·base·路径\n··\nvar gulp = reruire('gulp')\n\ngulp.src('js/lib/*.js', {base : 'js'})  // 指定 base 路径为 js\n    .pipe(gulp.dest('build'))   // 替换 js，输出路径为 build/lib/*.js\n··\n用·dest()·输出文件后，文件流仍然可以继续使用，即可继续使用·pipe()·\n\n##watch()\n监听文件变化后执行任务\n###gulp.watch(glob [, opts] [, tasks])\n!!\nglob{String/Array}：同·src()·中的·glob·\nopts{Object}：一些配置，通常情况下不需要用到\ntasks{Array}：文件变化后要执行的任务名\n!!\n··\ngulp.task('uglify', () => {})\ngulp.task('reload', () => {})\ngulp.watch('js/*.js', ['uglify', 'reload'])\n··\n###gulp.watch(glob [, opts] [, call])\n!!\ncall(info){Function}：每当监视的文件发生变化时，就会调用这个函数\n    info{Object}：文件变化的信息\n        type：变化的类型，可以是·added·新增、·changed·改变 、·deleted·删除\n        path：变化文件的路径\n!!\n··\ngulp.watch('js/*¿*/*.js', function (res) {\n    console.log(res.type)\n    console.log(res.path)\n})\n··\n\n#常用插件\n\n##自动加载\n说明：·gulp-load-plugins·这个插件能自动加载·package.json·文件里的 gulp 插件，@[参数配置|https://www.npmjs.com/package/gulp-load-plugins#options]\n安装：\n··\ncnpm install gulp-load-plugins --save-dev\n··\n使用前：\n··\nconst gulp = require('gulp'),\n    a = require('gulp-a'),\n    b = require('gulp-b'),\n    c = require('gulp-c'),\n    d = require('gulp-d'),\n    e = require('gulp-e')\n··\n使用后：\n··\nconst gulp = require('gulp')\nconst {a, b, c, d, e} = require('gulp-load-plugins')()\n··\n其插件的命名方式是·package.json·中依赖的名称去掉·gulp-·前缀再转驼峰命名\n例如假设·package.json·文件里的依赖是这样的：\n··\n{\n    \"devDependencies\": {\n        \"gulp\": \"^3.9.1\",\n        \"gulp-rename\": \"^1.2.0\",\n        \"gulp-ruby-sass\": \"^4.0.1\",\n        \"gulp-load-plugins\": \"^1.5.0\"\n    }\n}\n··\n引用时：\n··\nconst gulp = require('gulp')\nconst {rename, rubySass} = require('gulp-load-plugins')()\n··\n·gulp-load-plugins·并不会一开始就加载所有·package.json·里的 gulp 插件，而是在用到的时候才去加载\n注意：因为是通过·package.json·文件来加载插件的，所以要确定需要的插件已经写入到了·package.json·文件依赖里，并且已经安装好了这些插件\n\n##重命名\n用·dest()·输出文件时，文件名使用的是·src()·获取的文件名，·gulp-rename·插件可以改变这个文件名，@[用法|https://www.npmjs.com/package/gulp-rename#usage]\n安装：\n··\ncnpm install gulp-rename --save-dev\n··\n使用：\n··\nconst gulp = require('gulp'),\n    rename = require('gulp-rename'),\n    uglify = require(\"gulp-uglify\") // 压缩 js\n\ngulp.task('rename', function () {\n    gulp.src('js/jquery.js')\n        .pipe(uglify())\n        .pipe(rename('jquery.min.js')) // 重命名为 jquery.min.js\n        .pipe(gulp.dest('js'))\n})\n··\n\n##文件压缩\n压缩 html 文件：·gulp-htmlmin·，@[参数配置|https://github.com/kangax/html-minifier#options-quick-reference]\n压缩 css 文件：·gulp-clean-css·，@[参数配置|https://github.com/jakubpawlowicz/clean-css#constructor-options]\n压缩 js 文件：·gulp-uglify·，@[参数配置|https://github.com/mishoo/UglifyJS2#minify-options]\n压缩图片：·gulp-imagemin·，@[用法|https://www.npmjs.com/package/gulp-imagemin#usage]\n安装：\n··\ncnpm install gulp-htmlmin --save-dev\ncnpm install gulp-clean-css --save-dev\ncnpm install gulp-uglify --save-dev\ncnpm install gulp-imagemin --save-dev\n··\n使用\n··\nconst gulp = require('gulp'),\n    miniHtml = require('gulp-htmlmin')\n\ngulp.task('htmlmin', function () {\n    gulp.src('html/*.html')\n    .pipe(miniHtml())\n    .pipe(gulp.dest('dist/html'))\n})\n··\n\n##文件合并\n·gulp-concat·插件可用来把多个文件合并为一个文件，例如合并所有 js 或 css 为一个文件，这样就能减少 http 请求数了，@[用法|https://www.npmjs.com/package/gulp-concat#usage]\n安装：\n··\ncnpm install --save-dev gulp-concat\n··\n使用：\n··\nconst gulp = require('gulp'),\n    concat = require('gulp-concat')\n\ngulp.task('concat', function () {\n    gulp.src('js/*.js')\n    .pipe(concat('all.js'))     // 合并匹配到的 js 文件并命名为 all.js\n    .pipe(gulp.dest('dist'))\n})\n··\n\n##js 代码检查\n@[参数配置|https://jshint.com/docs/options/]\n安装：\n··\ncnpm install jshint --save-dev\n··\n使用：\n··\nconst gulp = require('gulp'),\n    jshint = require('jshint')\n\ngulp.task('jsLint', function () {\n    gulp.src('js/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter())    // 输出检查结果\n})\n··\n\n## 编译 sass\n@[参数配置|https://www.npmjs.com/package/gulp-sass#options]\n安装：\n··\ncnpm install gulp-sass --save-dev\n··\n使用：\n··\nconst gulp = require('gulp'),\n    sass = require('gulp-sass')\n\ngulp.task('compile-sass', function () {\n    gulp.src('sass/*.sass')\n    .pipe(sass({outputStyle: 'compact'}))\n    .pipe(gulp.dest('dist/css'))\n})\n··\n\n##babel 转 es5\n@[安装说明|https://www.npmjs.com/package/gulp-babel#install]，@[参数配置|https://babeljs.io/docs/en/options]\n安装：\n··\ncnpm install --save-dev gulp-babel @babel/core @babel/preset-env\n··\n使用：\n··\nconst gulp = require('gulp'),\n    babel = require('gulp-babel')\n\ngulp.task('default', function () {\n    gulp.src('js/*.js')\n        .pipe( babel({ presets: ['@babel/env'] }) )\n        .pipe(gulp.dest('dest/js'))\n})\n··\n\n##浏览器自动刷新\n·browser-sync·插件能让浏览器在文件改动时自动刷新页面，还可搭建静态服务，同一个 WiFi 中的任何设备都可以方便地访问到\n默认打开·localhost:3000·，UI 配置页面为端口号 +1，即·localhost:3001·，若 3000 端口被占用将打开 3001，UI 配置页面为 3002，依次类推\n@[参数配置|http://www.browsersync.cn/docs/options]\n安装：\n··\ncnpm install browser-sync --save-dev\n··\n使用：\n··\nvar gulp = require('gulp')\nvar bs = require('browser-sync').create()\n\ngulp.task('serve', function () {\n    // 初始化静态服务器，server 为服务配置，空字符串代表根目录，默认打开 index.html\n    bs.init({ server: '' })\n    // 当文件改动时刷新浏览器\n    gulp.watch(['index.html', 'css/*.css', 'js/*.js'], bs.reload)\n})\n··\n\n##其他\n!!\ngulp-sourcemaps：映射源文件，支持的插件@[说明|https://github.com/gulp-sourcemaps/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support]，sourcemap @[参考说明|http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html]，@[npm|https://www.npmjs.com/package/gulp-sourcemaps]\ngulp-replace：文件内的文本替换插件，可使用正则，@[npm|https://www.npmjs.com/package/gulp-replace]\ngulp-autoprefixer：给 css 样式补充前缀，@[npm|https://www.npmjs.com/package/gulp-autoprefixer]\ngulp-typescript：ts 编译成 js，@[npm|https://www.npmjs.com/package/gulp-typescript]\n!!\n\n#啃得起全家桶\n安装开发时插件：\n··\ncnpm install --save-dev gulp gulp-load-plugins gulp-sass browser-sync\n··\n安装打包插件：\n··\ncnpm install --save-dev gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin gulp-babel @babel/core @babel/preset-env\n··\n·gulpfile.js·：\n··\nconst gulp = require('gulp')\nconst p = require('gulp-load-plugins')()\nconst bs = require('browser-sync').create()\n\n// 获取 scss 文件，以 compact 模式编译，将结果输出到 css 文件中，刷新浏览器并注入流\ngulp.task('sass', () => {\n    gulp.src('scss/*¿.scss')\n        .pipe(p.sass({outputStyle: 'compact'}))\n        .pipe(gulp.dest('css'))\n        .pipe(bs.reload({stream: true}))\n})\n\n// 开启服务，实时编译 scss 文件，文件改动时自动刷新浏览器\ngulp.task('default', () => {\n    bs.init({server: ''})\n    gulp.watch('scss/*¿.scss', ['sass'])\n    gulp.watch(['index.html', 'css/*¿.css', 'js/*¿.js'], bs.reload)\n})\n\n// 压缩 html\ngulp.task('mhtml', () => {\n    gulp.src('html/*.html')\n        .pipe(p.htmlmin())\n        .pipe(gulp.dest('dist/html'))\n})\n\n// 压缩 css\ngulp.task('mcss', () => {\n    gulp.src('css/*.css')\n        .pipe(p.cleanCss())\n        .pipe(gulp.dest('dist/css'))\n})\n\n// 压缩 js\ngulp.task('mjs', () => {\n    gulp.src('js/*.js')\n        .pipe(p.babel({ presets: ['@babel/env'] }))\n        .pipe(p.uglify())\n        .pipe(gulp.dest('dist/js'))\n})\n\n// 压缩图片\ngulp.task('mimg', () => {\n    gulp.src('img/*')\n        .pipe(p.imagemin())\n        .pipe(gulp.dest('dist/img'))\n})\n\n// 压缩打包文件\ngulp.task('pack', ['mhtml', 'mcss', 'mjs', 'mimg'])\n··\n\n@@\ngulp 官网|https://gulpjs.com/\ngulp 中文网|https://www.gulpjs.com.cn/docs/getting-started/\n博客园-无双|http://www.cnblogs.com/2050/p/4198792.html\nnpm 搜索 gulp 插件|https://www.npmjs.com/search?q=keywords:gulpplugin\nBrowsersync 中文网|http://www.browsersync.cn\ngulp 4 升级指南|https://segmentfault.com/a/1190000005357048\n@@\n\n&2019/4/10（本文档基于 gulp 3）\n"}}},u=l,a=p("2877"),c=Object(a["a"])(u,e,t,!1,null,null,null);s["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d0c8fb9.6774ad54.js.map