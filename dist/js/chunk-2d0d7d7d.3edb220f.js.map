{"version":3,"sources":["webpack:///./src/pages/article/js/browser.vue?f52a","webpack:///src/pages/article/js/browser.vue","webpack:///./src/pages/article/js/browser.vue?8d35","webpack:///./src/pages/article/js/browser.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","domProps","_s","format","text","staticRenderFns","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,SAAS,CAAC,UAAYN,EAAIO,GAAGP,EAAIQ,OAAOR,EAAIS,WAClJC,EAAkB,GCItB,GACE,KADF,WAEI,MAAJ,CACM,KAAN,igKCR+W,I,YCO3WC,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAC,E","file":"js/chunk-2d0d7d7d.3edb220f.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{domProps:{\"innerHTML\":_vm._s(_vm.format(_vm.text))}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div v-html=\"format(text)\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data () {\r\n        return {\r\n            text: `\r\n# 浏览器\r\n\r\n## URL\r\n\r\n·<a>·元素和·<area>·元素都部署了这个接口。即它们的 DOM 节点对象可以使用 URL 的实例属性和方法\r\n\r\n··js\r\nvar a = document.createElement('a')\r\na.href = 'http://example.com/?foo=1'\r\n\r\na.hostname // \"example.com\"\r\na.search // \"?foo=1\"\r\n··\r\n\r\n### new URL\r\n\r\n·new URL(url)·：接受一个·url·生成·URL·实例\r\n\r\n··js\r\nvar url = new URL('http://www.example.com/index.html')\r\nurl.href // \"http://www.example.com/index.html\"\r\n··\r\n\r\n·new URL(relUrl, absUrl)·：如果 url 是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准\r\n\r\n··js\r\nvar url1 = new URL('index.html', 'http://example.com')\r\nurl1.href // \"http://example.com/index.html\"\r\n\r\nvar url2 = new URL('page2.html', 'http://example.com/page1.html')\r\nurl2.href // \"http://example.com/page2.html\"\r\n\r\nvar url3 = new URL('..', 'http://example.com/a/b.html')\r\nurl3.href // \"http://example.com/\"\r\n··\r\n\r\n### 实例方法\r\n\r\n（URL 实例的属性同 location 对象）\r\n\r\n!!\r\nURL.createObjectURL(file)：用来为上传/下载的文件、流媒体文件生成一个 URL 字符串，以·blob:·开头\r\n    这个 URL 对应内存的一个 Blob 对象，与·data://URL·（URL 包含实际数据）和·file://URL·（本地文件系统里面的文件）都不一样\r\nURL.revokeObjectURL(blobUrl)：释放·createObjectURL()·生成的实例以节省内存，参数即·createObjectURL()·返回的 url\r\n!!\r\n\r\n预览上传的图片\r\n\r\n··js\r\n// <input id=\"file\" type=\"file\" accept=\"image/*\"/>\r\n// <img id=\"img\"/>\r\n\r\nconst $file = document.querySelector('#file')\r\nconst $img = document.querySelector('#img')\r\n$file.onchange = function () {\r\n    $img.src = URL.createObjectURL(this.files[0]) // 形如 blob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1\r\n}\r\n··\r\n\r\n## URLSearchParams\r\n\r\n·URLSearchParams·对象用于处理 url 的查询字符串（即 url 问号后面的部分）\r\n\r\n## Blob\r\n\r\nBlob (Binary Large Object)：二进制大对象，Blob 对象表示一个二进制文件的数据内容，通常用来读写文件\r\n\r\n·new Blob(array [, options])·：生成实例对象\r\n\r\n!!\r\narray {Array}：由字符串或二进制对象组成的数组\r\noptions {Object}：配置\r\n    type {String}：数据的 MIME 类型，[参考 MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types)\r\n!!\r\n\r\n返回的实例属性方法\r\n\r\n!!\r\nmyBlob.size {Number}：数据的大小\r\nmyBlob.type {String}：数据的类型\r\nmyBlob.slice([start, end, contentType])：拷贝原来的数据并返回一个·Blob·实例\r\n    start {Number} [0]：指定起始的字节位置\r\n    end {Number} [myBlob.size]：指定结束的字节位置，该位置本身将不包含在拷贝的数据之中\r\n    contentType {String}：数据类型\r\n!!\r\n\r\n保存 html 数据：\r\n\r\n··js\r\nconst htmlFragment = '<a id=\"a\"><b id=\"b\">hey!</b></a>'\r\nconst myBlob = new Blob([htmlFragment], {type: 'text/html'})\r\n\r\nmyBlob.size // 32\r\nmyBlob.type // \"text/html\"\r\n··\r\n\r\n## File\r\n\r\n·File·对象代表一个文件，用来读写文件信息，继承自·Blob·对象\r\n\r\n### new File\r\n\r\n·new File(array, name [, options])·：主动生成·File·实例对象\r\n\r\n!!\r\narray {Array}：以二进制对象或字符串组成的数组，表示文件的内容\r\nname {String}：文件名或文件路径\r\noptions {Object}：设置实例的属性\r\n    type {String}：实例对象的 MIME 类型\r\n    lastModified {Number}[Date.now()]：上次修改的时间\r\n!!\r\n\r\n··js\r\nconst file = new File(['foo'], 'foo.txt', {type: 'text/plain'})\r\n··\r\n\r\n生成实例对象后的属性：\r\n\r\n!!\r\nFile.name：文件名或文件路径\r\nFile.size：文件大小（单位字节）\r\nFile.type：文件的 MIME 类型\r\nFile.lastModified：最后修改时间的时间戳格式\r\nFile.lastModifiedDate：最后修改时间的字符串格式\r\nFile.slice()：复制截取原来的数据，此方法继承于·Blob·对象\r\n!!\r\n\r\n··js\r\nconst myFile = new File([], 'file.bin', {lastModified: new Date(2018, 1, 1)})\r\nmyFile.name // \"file.bin\"\r\nmyFile.size // 0\r\nmyFile.type // \"\"\r\nmyFile.lastModified // 1517414400000\r\nmyFile.lastModifiedDate // Thu Feb 01 2018 00:00:00 GMT+0800 (中国标准时间)\r\n··\r\n\r\n### FileList\r\n\r\n类似数组的对象，代表一组选中的文件，每个成员都是一个·File·实例对象，实例对象的属性同上·new File·的\r\n它主要出现在两个场合：\r\n\r\n!!\r\n选择文件：·<input type=\"file\">·的·files·属性\r\n拖拽文件：目标区的·DataTransfer.files·属性\r\n!!\r\n\r\n··js\r\n// <input id=\"file\" type=\"file\"/>\r\n\r\nconst file = document.querySelector('#file').files[0]\r\nfile instanceof File // true\r\n··\r\n\r\n有个·item()·方法可以选择哪个文件，但方括号可以直接选择，即·files[0]·等同于·files.item(0)·，所以用不上了\r\n\r\n### new FileReader\r\n\r\n读取·File·对象或·Blob·对象，返回的实例属性：\r\n\r\n!!\r\nFileReader.error {Error}：读取文件时产生的错误对象\r\nFileReader.readyState {Number}：读取文件时的当前状态，·0·尚未加载，·1·正在加载，·2·加载完成\r\nFileReader.result：读取完成后的文件内容\r\n\r\nFileReader.onabort：abort 事件（用户终止读取操作）的监听函数。\r\nFileReader.onerror：error 事件（读取错误）的监听函数。\r\nFileReader.onload：load 事件（读取操作完成）的监听函数，通常在这个函数里面使用·result·属性，拿到文件内容\r\nFileReader.onloadstart：loadstart 事件（读取操作开始）的监听函数\r\nFileReader.onloadend：loadend 事件（读取操作结束）的监听函数\r\nFileReader.onprogress：progress 事件（读取操作进行中）的监听函数\r\n\r\nFileReader.abort(file)：终止读取操作，·readyState·属性将变成·2·\r\nFileReader.readAsArrayBuffer(file)：以·ArrayBuffer·的格式读取文件\r\nFileReader.readAsBinaryString(file)：以·BinaryString·的格式读取文件\r\nFileReader.readAsDataURL(file)：以·DataURL·（Base64 编码）的格式读取文件，对于图片文件可直接用于·<img>·的·src·属性\r\n    注意，不能直接对 Base64 解码，必须把前缀·data:*/*;base64,·从字符串里删除后再进行\r\nFileReader.readAsText(file [, encode])：以·text·的格式读取文件\r\n    file：文件的 Blob 实例\r\n    encode [UTF-8]：文本编码\r\n!!\r\n\r\n预览上传的图片：\r\n\r\n··js\r\n// <input id=\"file\" type=\"file\" accept=\"image/*\"/>\r\n// <img id=\"img\"/>\r\n\r\nconst $file = document.querySelector('#file')\r\nconst $img = document.querySelector('#img')\r\n$file.onchange = function () {\r\n    const reader = new FileReader()\r\n    if (this.files[0]) reader.readAsDataURL(this.files[0]) // 加个判断防止选择文件时点击取消也会触发\r\n    reader.onload = () => $img.src = reader.result\r\n}\r\n··\r\n\r\n## 浏览器\r\n\r\n### Network\r\n\r\nget - Query String Parameters\r\npost - Form Data：Content-Type: application/x-www-form-urlencoded (默认)\r\npost - Request Payload：Content-Type:application/json;charset=UTF-8（jq 默认会把 data 转成查询字符串，如果先 JSON.stringify(data) 就是个对象）\r\n\r\n&2019/4/18\r\n`\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./browser.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./browser.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./browser.vue?vue&type=template&id=f9d1e642&\"\nimport script from \"./browser.vue?vue&type=script&lang=js&\"\nexport * from \"./browser.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}