(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d6f35"],{7578:function(n,e,r){"use strict";r.r(e);var s=function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},a=[],t={data:function(){return{text:"\n# sql server\n\n## 概述\n\n大多数数据库使用 SQL 语句，包括：Oracle、Sybase、SQL Server、DB2、Access 等\nSQL 语句对大小写不敏感，例如 SELECT 等同于 select\n快捷用法：若运行时有光标选中将只运行选中部分的代码\n快捷键：\n\n!!\nF5 或 Alt + X 或 Ctrl + E：执行\nCtrl + Shift + L：将选定文本转换为小写\nCtrl + Shift + U：将选定文本转换为大写\nCtrl + R：显示隐藏结果窗格\nAlt + 上下键：移动当前行\n!!\n\n## create table\n\n创建表和表头，语法：\n\n··sql\ncreate table <tableName> (\n    column_name1 data_type(size),\n    column_name2 data_type(size),\n    column_name3 data_type(size),\n    ...\n)\n··\n\n例如创建用户信息表：\n\n··sql\ncreate table user_info (\n    id bigint,\n    name varchar(20),\n    age int,\n    sex int,\n    address varchar(255)\n)\n··\n\n## insert into\n\n增加数据（SQL server 中每次插入的条数不能超过 1000）\n第一种不指定列名，需要插入的值和表头一一对应\n\n··sql\ninsert into tableName values (value1, value2, value3, ...)\n··\n\n第二种指定列名，值和表头对应即可，若某列未插入值则会以·NULL·代替：\n\n··sql\ninsert into tableName (column1, column2, column3, ...)\nvalues (value1, value2, value3, ...)\n··\n\n## select\n\n### select\n\n查询列，语法：\n\n··sql\nselect <columnName> from <tableName>\n··\n\n例如：\n\n··sql\n/* 所有列 */\nselect * from table\n\n/* 单列 */\nselect name from table\n\n/* 多列 */\nselect name,age from table\n··\n\n### where\n\n条件查询，语法：\n\n··sql\nselect <columnName> from <tableName> where <columnName> <condition> <value>\n··\n\n·value· 需用单引号标记，数字可省略\n·condition· 运算符包括：\n\n!!\n=：等于\n\\!= 或 <>：不等于\n>：大于\n<：小于\n>=：大于等于\n<=：小于等于\nand：与，同时需要符合所有条件\nor：或，只需要符合某一条件\nnot：非，除了指定条件\nin (...)：在指定的值内\nbetween ... and ...：指定范围，不同数据库是否包括开头结尾可能不一致\nlike：指定模式，相当于正则，\n    %：代表 0 到多个字符\n    _：代表 1 个字符\n    \\[charlist]：中括号中任意一个字符\n    \\[^charlist] 或 \\[\\!charlist]：非中括号中任意单一字符\n    \\[0-9]\\[a-z]：中括号中使用 - 可表示范围\n!!\n\n例如有个 Persons 表：\n\n%%\n/ LastName / FirstName / Address / City / Year /\n/ :-: / :-: / :-: / :-: / :-: /\n/ Adams / John / Oxford Street / London / 1970 /\n/ Bush / George / Fifth Avenue / New York / 1975 /\n/ Carter / Thomas / Changan Street / Beijing / 1980 /\n/ Gates / Bill / Xuanwumen 10 / Beijing / 1985 /\n%%\n\n找 Beijing 城市，执行：\n\n··sql\nselect * from Persons where City = 'Beijing'\n··\n\n结果：\n\n%%\n/ LastName / FirstName / Address / City / Year /\n/ :-: / :-: / :-: / :-: / :-: /\n/ Carter / Thomas / Changan Street / Beijing / 1980 /\n/ Gates / Bill / Xuanwumen 10 / Beijing / 1985 /\n%%\n\n**and**：找姓为 Carter 且名为 Thomas 的人：\n\n··sql\nselect * from Person where FirstName = 'Thomas' **and** LastName = 'Carter'\n··\n\n**or**：找姓为 Carter 或名为 Thomas 的人：\n\n··sql\nselect * from Person where FirstName = 'Thomas' **or** LastName = 'Carter'\n··\n\n**and or**：\n\n··sql\nselect * from Person where (FirstName = 'Thomas' **or** LastName = 'Carter') **and** LastName = 'Carter'\n··\n\n**not**：找非北京城市的人：\n\n··sql\nselect * from Person where **not** city = 'Beijing'\n··\n\n**in**：找 London 和 New York 城市：\n\n··sql\nselect * from Person where city **in** ('London', 'New York')\n··\n\n**between and**：找 1975 到 1985 之间的年份：\n\n··sql\nselect * from Persons where City **between** 1975 **and** 1985\n··\n\n**like**：找包含 n 字母的城市：\n\n··sql\nselect * from Persons where City **like** '%n%'\n··\n\n\n#### 查询 null 值\n\n直接查找 null 是查不到的\n\n··sql\nselect * from Persons where City = null\n··\n\n应使用 is：\n\n··sql\nselect * from Persons where City is null\n··\n\n在 SQL 中的逻辑值除了 true 和 false 还有 unknown（未知），一般任何值与 null 比较都会返回 unknown，而 unknown 会被当作 false，即·where City = null·无结果\n但在 check 约束中，unknown 就会被当作 true 来处理，例如设置某个字段的值必须大于等于 0，还是可以插入 null，因为在 check 约束中·null >= 0·返回的 unknown 会被当作 true\n\n### distinct\n\n去重，语法：\n\n··sql\nselect distinct <columnName> from <tableName>\n··\n\n例如：\n\n··sql\nselect distinct * from tableName\n··\n\n### order by\n\n对结果进行排序，默认从小到大排序（asc），即 0-9，a-b，如果需要倒序则需要在最后加上·desc·，语法：\n\n··sql\nselect <columnName> from <tableName> order by <columnName> [asc/desc]\n··\n\n例如：\n\n··sql\n/* 排序 */\nselect Company, OrderNumber from Orders order by Company\n\n/* 每个相同的 Company 中再进行 OrderNumber 排序 */\nselect Company, OrderNumber from Orders order by Company, OrderNumber\n\n/* 倒叙 */\nselect Company, OrderNumber from Orders order by Company desc\n\n/* 每个相同的 Company 中再进行 OrderNumber 正序排序 */\nselect Company, OrderNumber from Orders order by Company desc, OrderNumber asc\n··\n\n### top\n\n规定要返回多少条数据，语法：\n\n··sql\nselect top <number/percent> <columnName> from <tableName>\n··\n\n例如：\n\n··sql\n/* 前 10 条数据 */\nselect top 10 * from Persons\n\n/* 前 50% 条数据（总行为单数向上取整 + 0.5） */\nselect top 50 percent * from Persons\n··\n\n## update\n\n修改数据，语法：\n\n··sql\nupdate <tableName> set <columnName> = <newValue> where <columnName> = <value>\n··\n\n也就是设置 **要改的列名 = 新值** 再找到对应的行，如果对应的行有多个也会修改多个\n例如：\n\n··sql\nupdate Person set FirstName = 'Fred' where LastName = 'Wilson' \n\n/* 修改多个 */\nupdate Person set Address = 'Zhongshan 23', City = 'Nanjing' WHERE LastName = 'Wilson'\n··\n\n## delete\n\n删除行，语法：\n\n··sql\ndelete from <tableName> where <columnName> = <value>\n··\n\n例如：\n\n··sql\ndelete from Person where LastName = 'Wilson'\n\n/* 删除所有行 */\ndelete from table_name\n··\n\n## alias\n\n对表名称或列名称指定别名进行操作将更易于阅读和书写\n重命名表：\n\n··sql\nselect <columnName> from <tableName> as <newName>\n··\n\n重命名列：\n\n··sql\nselect <columnName> as <newName> from <tableName>\n··\n\n例如有两个表分别是·Persons·和·Product_Orders·，分别指定别名·p·和·po·\n\n··sql\nselect po.orderId, p.name from Persons as p, Product_Orders as po where p.name = 'Tom'\n··\n\n不使用别名的语句是：\n\n··sql\nselect Product_Orders.orderId, Persons.name from Persons, Product_Orders where Persons.name = 'Tom'\n··\n\n\n## date\n\n··sql\n/* 计算时间戳 */\nselect datediff(s,'1970-01-01 00:00:00', getdate())\n··\n\n@@\n[w3school - SQL 教程](http://www.w3school.com.cn/sql/index.asp)\n@@\n\n&2018/9/30\n            "}}},l=t,o=r("2877"),m=Object(o["a"])(l,s,a,!1,null,null,null);e["default"]=m.exports}}]);
//# sourceMappingURL=chunk-2d0d6f35.22108e9c.js.map