(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21a6f9"],{bc02:function(n,e,t){"use strict";t.r(e);var a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},s=[],o={data:function(){return{text:"\n# date\n\n## 概述\n\n·Date·对象可以处理日期时间。以·1970/01/01 00:00:00·作为时间的零点，可以表示前后各 1 亿天的范围\n\n### 普通函数\n\n直接调用会返回一个代表当前时间的字符串，不接受参数\n\n··js\nDate() // \"Wed Apr 03 2019 16:14:02 GMT+0800 (中国标准时间)\"\n··\n\n### 构造函数\n\n使用·new·命令可创建·Date·对象的实例，不使用参数时的返回值等同于·Date()·，即当前时间\n当传入时间格式参数时返回该参数对应的时间实例，参数说明：\n\n#### 一个毫秒整数代表时间戳\n\n··js\nnew Date(1378218728000)\nnew Date(-1378218728000)\n··\n\n#### 两个以上整数代表年、月、日、时、分、秒、毫秒\n\n省略的部分默认为 0\n\n··js\nnew Date(2013, 6)\nnew Date(2019, 3, 24, 20, 0, 0, 0)\n··\n\n取值范围：\n\n!!\n年：使用四位数年份，如果写成两位数或个位数，则自动加上 1900，即 10 代表 1910 年。如果是负数，表示公元前\n月：0-11\n日：1-31\n小时：0-23\n分钟：0-59\n秒：0-59\n毫秒：0-999\n!!\n\n#### 一个能被·Date.parse()·解析的字符串\n\n··js\nnew Date('2013-2-15')\nnew Date('2013/2/15')\nnew Date('02/15/2013')\nnew Date('2013-FEB-15')\nnew Date('FEB, 15, 2013')\nnew Date('FEB 15, 2013')\nnew Date('Feberuary, 15, 2013')\nnew Date('Feberuary 15, 2013')\nnew Date('15 Feb 2013')\nnew Date('15, Feberuary, 2013')\n··\n\n#### 日期的运算\n\nDate 实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串\n\n··js\n+ new Date // 1554280788949\n'时间：' + new Date // \"时间：Wed Apr 03 2019 16:40:15 GMT+0800 (中国标准时间)\"\n··\n\n## 静态方法\n\n### Date.now()\n\n返回当前时间距离时间零点（·1970/01/01 00:00:00·）的毫秒数\n\n··js\nDate.now() // 1364026285194\n··\n\n### Date.parse()\n\n解析日期字符串，返回该时间距离时间零点（·1970/01/01 00:00:00·）的毫秒数\n日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即 YYYY-MM-DDTHH:mm:ss.sssZ 格式，其中最后的 Z 表示时区\n其他格式也可以被解析，若解析失败返回·NaN·\n\n··js\nDate.parse('Aug 9, 1995') // 807897600000\nDate.parse('January 26, 2011 13:51:50')\nDate.parse('Mon, 25 Dec 1995 13:30:00 GMT')\nDate.parse('Mon, 25 Dec 1995 13:30:00 +0430')\nDate.parse('2011-10-10')\nDate.parse('2011-10-10T14:48:00')\n\nDate.parse('xxx') // NaN\n··\n\n### Date.UTC()\n\n等同于·new Date()·，区别在于是 UTC 时间（世界标准时间），·new Date()·是当前时区时间\n\n··js\nDate.UTC(2011, 0, 1, 2, 3, 4, 567) // 1293847384567\n··\n\n## 实例方法\n\n### get 类\n\n以下方法前面省略·Date.prototype.·\n\n!!\ngetTime()：·1970/01/01 00:00:00·到现在的毫秒数，等同于·valueOf()·（中国由于时区会加 8 小时）\ngetDate()：每个月的几号（从 1 开始）\ngetDay()：星期几，星期日为 0，星期一为 1，以此类推\ngetYear()：返回距离 1900 的年数\ngetFullYear()：返回四位的年份\ngetMonth()：返回月份（0表示1月，11表示12月）\ngetHours()：返回小时（0-23）\ngetMinutes()：返回分钟（0-59）\ngetSeconds()：返回秒（0-59）\ngetMilliseconds()：返回毫秒（0-999）\ngetTimezoneOffset()：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素\n!!\n\n··js\nvar d = new Date('January 6, 2013')\n\nd.getDate() // 6\nd.getMonth() // 0\nd.getYear() // 113\nd.getFullYear() // 2013\nd.getTimezoneOffset() // -480，除以 60 即早 8 个小时\n··\n\n#### UTC （世界时间）版：\n\n!!\ngetUTCDate():\ngetUTCDay():\ngetUTCFullYear():\ngetUTCMonth():\ngetUTCHours():\ngetUTCMinutes():\ngetUTCSeconds():\ngetUTCMilliseconds():\n!!\n\n### set 类\n\n和 get 类对应，除了·setDay·方法没有，因为星期几是计算出来的，而不是设置的\n以下方法前面省略·Date.prototype.·\n\n!!\nsetDate(date)：设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳\nsetYear(year)：设置距离1900年的年数\nsetFullYear(year [, month, date])：设置四位年份\nsetMonth(month [, date])：设置月份（0-11）\nsetHours(hour [, min, sec, ms])：设置小时（0-23）\nsetMilliseconds()：设置毫秒（0-999）\nsetMinutes(min [, sec, ms])：设置分钟（0-59）\nsetSeconds(sec [, ms])：设置秒（0-59）\nsetTime(milliseconds)：设置毫秒时间戳\n!!\n\n若参数超过范围会自动折算。以·setDate·为例：\n如果参数超过当月的最大天数，则向下一个月顺延\n如果参数是负数，表示从上个月的最后一天开始减去的天数\n\n··js\nvar d = new Date ('January 6, 2013')\n\nd.setDate(9) // 1357660800000\nd // Wed Jan 09 2013 00:00:00 GMT+0800 (CST)\n\nd.setDate(32) // 1359648000000\nd // Fri Feb 01 2013 00:00:00 GMT+0800 (CST)\n··\n\nset 类方法和 get 类方法可以结合使用得到相对时间\n\n··js\nvar d = new Date()\n\n// 将日期向后推 1000 天\nd.setDate(d.getDate() + 1000)\n// 将时间设为 6 小时后\nd.setHours(d.getHours() + 6)\n// 将年份设为去年\nd.setFullYear(d.getFullYear() - 1)\n··\n\n#### UTC （世界时间）版：\n\n!!\nsetUTCDate():\nsetUTCFullYear():\nsetUTCMonth():\nsetUTCHours():\nsetUTCMilliseconds():\nsetUTCMinutes():\nsetUTCSeconds():\n!!\n\n### to 类\n\n以下方法前面省略·Date.prototype.·\n\n!!\ntoString()：返回日期字符串，当直接读取实例或转为字符串时即调用的该方法\ntoUTCString()：返回日期字符串的世界时间（早北京时间 8 小时）\ntoISOString()：返回日期字符串的 ISO8601 （且为 UTC 时间）写法，形如·2012-12-31T16:00:00.000Z·\ntoJSON()：等同于·.toISOString()·\ntoDateString()：返回日期字符串的年月日星期部分，形如·Thu Apr 04 2019·\ntoTimeString()：返回日期字符串的时分秒和时区部分，形如·11:38:25 GMT+0800 (中国标准时间)·\ntoLocaleDateString()：返回日期字符串当地写法的年月日部分，形如·2019/4/4·（不同浏览器格式可能不同）\ntoLocaleTimeString()：返回日期字符串当地写法的时分秒部分，形如·上午11:41:46·（不同浏览器格式可能不同）\n!!\n\n### valueOf()\n\n·Date.prototype.valueOf()·：返回实例对象的时间戳，等同于·getTime()·\n将日期实例对象转为数值时即调用的该方法\n\n## demo\n\n### 判断时间\n\n··js\n// 判断闰年，能被 4 且不能被 100 整除，或能被 400 整除\nconst isLeapYear = y => y % 4 === 0 && y % 100 !== 0 || y % 400 === 0\n\n// 获取今年的天数\nconst thisYearDays = isLeapYear(new Date().getFullYear()) ? 366 : 365\n\n// 判断月份的天数，1 3 5 7 8 10 12 返回 31，4 6 9 11 返回 30，2 如果是闰年返回 29，否则 28\nconst getMonthDays = (m, y) => /^1$|3|5|7|8|10|12/.test(m) ? 31\n    : /4|6|9|11/.test(m) ? 30\n    : isLeapYear(y) ? 29 : 28\n··\n\n### 倒计时\n\n··js\n// 时间只有 1 位就在前面加 0\nconst add0 = n => n > 9 ? n : '0' + n\n\n// 时间戳格式化：倒计时时分秒\nconst formatTime = timeDiff => {\n    const day = Math.floor(timeDiff / 1000 / 60 / 60 / 24)\n    const hour = Math.floor(timeDiff / 1000 / 60 / 60 % 24)\n    const minute = Math.floor(timeDiff / 1000 / 60 % 60)\n    const second = Math.floor(timeDiff / 1000 % 60)\n    return [day * 24 + hour, minute, second].map(add0).join(' : ')\n}\n··\n\n### 格式化\n\n··js\n// 时间只有 1 位就在前面加 0\nconst add0 = n => n > 9 ? n : '0' + n\n\n// 时间戳格式化：年月日 时分秒\nconst formatDate = (time, format) => {\n    const date = new Date(time - 0)\n    const aWeek = '日一二三四五六'\n\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const week = '周' + aWeek[date.getDay()]\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n    const second = date.getSeconds()\n\n    const ymd = [year, month, day].map(add0).join('/')\n    const hms = [hour, minute, second].map(add0).join(':')\n\n    return format === 'ymd' ? ymd : format === 'hms' ? hms : [ymd, week, hms].join(' ')\n}\n\n// 时间戳格式化：年月日 时分，判断显示昨天、前天、月日、年月日\nconst formatDateNow = (time, nowTime, join = ' ') => {\n    // 指定的时间\n    const date = new Date(time - 0)\n\n    const year = date.getFullYear()\n    const month = date.getMonth() + 1\n    const day = date.getDate()\n    const hour = date.getHours()\n    const minute = date.getMinutes()\n\n    let md = [month, day].map(add0).join('/')\n    const hm = [hour, minute].map(add0).join(':')\n\n    // 现在的年份\n    const nowDate = new Date(nowTime)\n    const nowYear = nowDate.getFullYear()\n    const today0 = new Date(nowDate.toDateString()) // 以当天 0 点作为分隔\n\n    // 判断两个日子之差\n    const dayDiff = Math.floor((today0 - time - 1) / 1000 / 60 / 60 / 24)\n    if (dayDiff < 2) {\n        md = dayDiff < 0 ? '' : dayDiff === 0 ? '昨天' : '前天'\n    } else {\n        md = (nowYear === year ? '' : year + '/') + md\n    }\n\n    return md + (md && join) + hm\n}\n··\n\n&2019/4/4\n"}}},r=o,d=t("2877"),D=Object(d["a"])(r,a,s,!1,null,null,null);e["default"]=D.exports}}]);
//# sourceMappingURL=chunk-2d21a6f9.215fc05e.js.map