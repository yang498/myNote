(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b30f5"],{2782:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{domProps:{innerHTML:n._s(n.format(n.text))}})},r=[],i={data:function(){return{text:"\n# weex\n\n本文档记录版本·v0.28.0·\n\n## 概述\n\n### 介绍\n\n使用 Weex 可以构建一个真正的原生应用，一套简单易用的跨平台开发方案\n在开发阶段，一个 Weex 页面就像开发普通网页一样；在运行时，Weex 页面又充分利用了各种操作系统的原生组件和能力\nWeex 的渲染引擎与语法层是分开的，也不依赖任何特定的前端框架，目前主要支持 Vue.js 和 Rax 这两个前端框架\n在开发 Weex 页面就像开发普通网页一样；在渲染 Weex 页面时和渲染原生页面一样\n\n### 动态性\n\n有时 APP 只改了 1、2 行代码就更新一个版本的代价比较高，嵌入 webview 加载 h5 页面可解决部分问题\n而 Weex 可以成为 APP 的原生页面，也只需要更新 js 文件即可，可使用 Weex 作为 APP 中需要经常更新的页面\n虽然整个 App 可以使用 Weex 开发，但还不适用复杂的场景\n\n### 平台差异\n\n!!\n没有 DOM：没有·document Element Event File·等对象\n没有 BOM：没有·window·对象，不支持使用全局变量，如果是想要获取设备或环境信息可使用·WXEnvironment·变量\n调用原生 API：通过注册、调用模块来实现。其中一些是 Weex 内置的，如·clipboard navigator storage·等\n!!\n\n## 开发\n\n使用 [Online Editor](http://dotwe.org/vue?spm=a2c7j.-zh-guide-develop-setup-develop-environment.0.0.1704c8ee7eIejd) 可在线编辑尝鲜\n\n#### 安装依赖\n\n首先需要 node.js 环境，然后安装 [Weex CLI](https://github.com/apache/weex-cli?spm=a2c7j.-zh-guide-develop-setup-develop-environment.0.0.1704c8ee7eIejd)：\n\n··bash\nnpm i -g weex-toolkit \n··\n\n安装后可使用·weex·指令\n\n··js\nweex -v // 版本\nweex help // 所有指令\nweex doctor // 检查本地开发环境\n··\n\n目前·weex-cli·只支持创建 Vue.js 的项目。创建 Rax 的项目可以使用·rax-cli·，参考 [Rax 官方网站](https://alibaba.github.io/rax/?spm=a2c7j.-zh-guide-develop-create-a-new-app.0.0.167c2a18pQcXuW)\n\n### 初始化项目\n\n··bash\nweex create <project>\n··\n\n然后进入项目，安装依赖（在初始化时可选择自动安装）后启动项目\n\n··bash\nnpm start\n··\n\n打开控制台提示的本地环境网页，使用 Playground APP 即可扫码进行真机体验\n[PlaygroundWeex](https://weex.apache.org/zh/guide/playground.html) 是 Weex 示例 App，可扫码预览 Weex 代码构建后的页面\n\n### 编译页面\n\n··bash\nweex compile [资源文件] [目标目录] <options>\n··\n\n例如编辑 src 目录中的文件打包到 dist 目录：\n\n··bash\nweex compile src dist\n··\n\n例如编辑 src 目录中的 index.vue 文件打包到 dist 目录：\n\n··bash\nweex compile src/index.vue build\n··\n\noptions 选项：\n\n%%\n| 选项 | 默认值 | 描述 |\n| :-: | :-: | :-: |\n| ·-w, --watch· | ·true· | 监听文件改动并实时编译 |\n| ·-d, --devtool [devtool]· | - | 设置 webpack 编译的 devtool 选项 |\n| ·-e, --ext [ext]· | ·.vue· | 设置默认编译文件 |\n| ·-m, --min· | ·false· | 对产物进行代码混淆及压缩 |\n| ·-c, --config· | ·false· | 传入 webpack 配置文件 |\n| ·-b, --base· | ·process.cwd()· | 设置基础路径 |\n%%\n\n### 预览页面\n\n直接对单个 .vue 文件进行零配置的沙箱预览\n\n··bash\nweex preview [file | folder] <options>\n··\n\n例如预览指定页面：\n\n··bash\nweex preview src/foo.vue\n··\n\n还可通过·--entry·预览指定页面：\n\n··bash\nweex src --entry src/foo.vue\n··\n\noptions 选项：\n\n%%\n| 选项 | 默认值 | 描述 |\n| :-: | :-: | :-: |\n| ·-d, --devtool [devtool]· | - | 设置 webpack 编译的 devtool 选项 |\n| ·-m, --min· | ·false· | 对产物进行代码混淆及压缩 |\n| ·-c, --config· | ·false· | 传入 webpack 配置文件 |\n| ·-b, --base· | ·process.cwd()· | 设置基础路径 |\n%%\n\n### 添加真机工程\n\n添加 Weex 官方 iOS/Android 工程功能\n\n··bash\nweex platform [add|remove] [ios|android]\n··\n\n例如：\n\n··bash\nweex platform add ios\nweex platform remove ios\n··\n\n可以使用·weex platform list·查看项目中支持的平台\n\n### 运行真机工程\n\n··js\nweex run ios // 运行 iOS 模拟器预览\nweex run android // 运行 Android 模拟器/真机预览\nweex run web // 运行 Web 端预览\n··\n\n### 其他\n\n··js\nweex debug [we_file|bundles_dir] [options] // 调试\nweex lint [file | folder] <options> // 代码质量检查\n··\n\n[集成到 Android 应用](https://weex.apache.org/zh/guide/develop/integrate-to-android-app.html)\n[集成到 iOS 应用](https://weex.apache.org/zh/guide/develop/integrate-to-android-app.html)\n[Weex 常见错误码](https://weex.apache.org/zh/guide/develop/weex_error_code.html)\n\n## API\n\n每个 Weex 页面的 JS 上下文中都有一个相互独立的·weex·变量\n它可以像全局变量一样使用，不过它在不同页面中是隔离而且只读的\n\n### 属性\n\n!!\nconfig：当前 Weex 页面的所有环境信息\n    bundleUrl：当前页面 js bundle 的 URL 地址\n    bundleType：当前页面是用那种框架开发的，可以是·\"Vue\"·或者·\"Rax\"·\n    env：环境变量，等同于全局变量·WXEnvironment·\ndocument：当前页面的文档模型对象，主要是内部使用，直接操作 DOM 并不是最佳实践，不建议在开发页面时使用\n!!\n\n#### WXEnvironment\n\n!!\nappGroup：·WXApp·，当前APP应用类型\nappName：·WXSample·，当前APP应用名字\nappVersion：·0.5.2.5·，当前APP应用版本\ndeviceWidth：·1080·，设备宽度\ndeviceHeight：·1920·，设备高度\ndeviceModel：·vivoX6D·，设备型号\nplatform：·Android·，当前运行平台\nosName：·Android·，操作系统名称\nosVersion：·5.1·，系统版本\nweexVersion：·0.9.4·，weex sdk版本\nscale：·3.0·，页面缩放比例\n!!\n\n### 方法\n\n!!\nrequireModule：引用自定义的或者内置的模块，参数为大小写敏感的模块名\n    如果模块已经注册则返回一个对象，否则返回·undefined·\nsupports：检测某个功能在当前环境中是否可用，\n    正常情况下返回 Boolean 值，参数格式错误或无法确定是否支持则返回 null\n    参数为特定格式的字符串·@{type}/{name}·\n        type：·component·或·module·\n        name：模块名，例如·weex.supports('@component/slider')·\nisRegisteredModule：检测某个特定的模块或者接口是否可用，可传入第二个参数为子属性或方法\nisRegisteredComponent：检测某个特定的组件是否可用\n!!\n\n## 组件\n\n### 组件\n\n!!\ntext：文本容器\na：链接，注意不能在里面直接添加文本，需用·<text>·\ndiv：容器，不能直接添加文本，需用·<text>·，超出会隐藏\nscroller：可滚动的容器\nimage：图片，必须要有宽高，不支持子组件\ninput：输入框，不支持子组件\ntextarea：文本域\nlist：列表滚动容器，适合长列表的展示\n    cell：·<list>·的子组件\nrecycle-list：·<list>·的升级版，具有回收和复用的能力，可以大幅优化内存占用和渲染性能\n    cell-slot：子节点\nrefresh：下拉刷新，只能在·scroller list waterfall·中使用\n    loading-indicator：转圈动画的子组件，注意 Android 和 iOS 的样式有差异\nloading：上拉加载，只能在·scroller list waterfall·中使用\n    loading-indicator：转圈动画的子组件，注意 Android 和 iOS 的样式有差异\nslider：轮播图\n    indicator：轮播图的指示器小点组件\nvideo：视频\nwaterfall：瀑布流布局的组件容器\nweb：网页容器\nrichtext：富文本\n!!\n\n### refresh\n\n下拉刷新，只能在·scroller list waterfall·中使用\n\n#### 属性\n\n!!\ndisplay {String} [show]：控制组件的显示隐藏，可选·show hide·\n!!\n\n#### 事件\n\n!!\nrefresh：下拉完时触发，即手松开的时候\npullingdown：被下拉时触发，即手移动的时候，事件参数对象属性如下\n    dy：前后两次回调滑动距离的差值\n    pullingDistance：下拉的距离\n    viewHeight：组件高度\n    type：“pullingdown” 字符串\n!!\n\n··html\n<list>\n    <refresh\n        class=\"refresh\"\n        :display=\"refreshing ? 'show' : 'hide'\"\n        @refresh=\"onrefresh\"\n        @pullingdown=\"onpullingdown\"\n    >\n        <loading-indicator\n            class=\"refresh-indicator\"\n            :style=\"{ color: pullingBorder ? 'rgba(0, 140, 214, 1)' : 'rgba(0, 140, 214, 0.5)' }\"\n        ></loading-indicator>\n        <div class=\"refresh-content\" v-if=\"platform === 'ios' && !refreshing\">\n            <text class=\"refresh-arrow\">{{ pullingBorder ? '&uarr;' : '&darr;' }}</text>\n            <text class=\"refresh-text\">{{ pullingBorder ? '释放刷新' : '下拉刷新' }}</text>\n        </div>\n    </refresh>\n\n    <cell></cell>\n    ...\n</list>\n··\n\n··js\ndata: {\n    refreshing: false,  // 是否显示下拉刷新\n    pullingBorder: false,   // 下拉刷新是否到了松手可刷新的边界值\n    pullingDistance: 170    // 下拉刷新的最低刷新下拉距离\n},\nmethods: {\n    onrefresh() {\n        this.refreshing = true  // 手松开显示加载中\n        this.init() // 加载数据\n    },\n    onpullingdown(e) {\n        this.pullingBorder = Math.abs(e.pullingDistance) > this.pullingDistance\n    },\n    init() {\n        stream.fetch({\n            url,\n            method: 'GET',\n            type:'json'\n        }, res => {\n            this.refreshing = false\n        })\n}\n··\n\n··css\n.refresh {\n    width: 750px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n}\n\n.refresh-indicator {\n    width: 75px;\n    height: 75px;\n}\n\n.refresh-content {\n    width: 260px;\n    flex-direction: row;\n    align-items: center;\n}\n\n.refresh-arrow {\n    color: #008cd6;\n    font-size: 50px;\n    margin-right: 10px;\n}\n\n.refresh-text {\n    color: #008cd6;\n    font-size: 32px;\n}\n··\n\n## 模块\n\n使用模块需要先引入，比如·const animation = weex.requireModule('animation')·\n\n### 模块\n\n!!\nanimation：动画\n    transition：过渡动画\nclipboard：系统剪贴板\n    getString：获取系统剪贴板的内容\n    setString：设置系统剪贴板的内容\ndom：节点\n    scrollToElement：让页面滚动到指定·ref·对应的组件\n    getComponentRect：获取某个元素 View 的外框\n    getLayoutDirection：获取当前的布局方向，是 Left to Right，还是 Right to Left\n    addRule：加载自定义字体\nglobalEvent：监听持久性事件，例如定位信息，陀螺仪等的变化\n    addEventListener：注册全局监听事件\n    removeEventListener：移除全局监听事件\nmeta：声明单个页面的元信息，一般无需修改\n    setViewport：改变页面的显示宽度（默认 750px），注意需要在入口文件的·new Vue·之前使用\nmodal：消息提示框，支持·toast·、·alert·、·confirm·、·prompt·\nnavigator：页面跳转，在切换的时候还可以应用动画效果，支持·push·跳转·pop·返回\npicker：选择器，支持·pick·自定义数据单选、·pickDate·日期选择、·pickTime·时间选择\nstorage：本地数据存储\n    setItem：存储数据\n    removeItem：删除数据\n    getItem：获取数据\n    getAllKeys：获取全部存储项键名的数组\n    length：存储数量\nstream：网络请求\n    fetch：发起请求\nwebview：操作·<web>·网页\n    goBack：返回\n    goForward：前进\n    reload：刷新\nwebSocket：创建持久性的连接\ndeviceInfo：获取设备的基本信息并进行设置\n    enableFullScreenHeight：开启全屏效果以适配全面屏手机\nconsole-log：有时候线上应用会屏蔽控制台日志，Console-log 可强制将 Weex 日志输出到控制台\n!!\n\n### animation\n\n过渡动画：·animation.transition(el, options, callback)·\n\n!!\nel：将要执行动画的元素，通过设置·ref·属性调用\noptions：参数\n    styles：动画样式\n        width：目标宽度\n        height：目标高度\n        backgroundColor：目标颜色\n        opacity {Number/0-1} [1]：目标透明度\n        transformOriginn {String/x,y} [center center]：动画中心点\n        transform：变形，多个动画用空格隔开\n            translate/translateX/translateY {px/%}：目标位置\n            rotate/rotateX/rotateY {Number}：旋转角度\n            scale/scaleX/scaleY {Number}：缩放\n            perspective {Number} [+∞]：观察者距离z=0平面的距离\n    duration {Number} [0]：持续时间，单位毫秒\n    delay {Number} [0]：延迟时间，单位毫秒\n    needLayout {Boolean} [false]：执行时是否产生布局动画\n    timingFunction [linear]：运动曲线\n        linear：匀速\n        ease：逐渐变慢\n        ease-in：由慢到快\n        ease-out：由快到慢\n        ease-in-out：由慢到快，到中间点再由快到慢\n        cubic-bezier(x1, y1, x2, y2)：自定义[贝塞尔](http://cubic-bezier.com)\ncallback：动画执行完毕之后的回调函数\n!!\n\n··js\nconst animation = weex.requireModule('animation')\n\nanimation.transition(this.$refs.demo, {\n    styles: {\n        color: '#f00',\n        backgroundColor: '#ccc',\n        transform: 'translateY(-100%) rotate(180deg)',\n        transformOrigin: 'center center'\n    },\n    duration: 800,\n    timingFunction: 'ease',\n}, () => {\n    modal.toast({ message: 'animation finished' })\n})\n··\n\n### dom\n\n#### scrollToElement(ref, options)\n\n滚动到相应节点，这个 API 只能用于可滚动组件的子节点，例如·<scroller> <list>·等可滚动组件中。\n\n!!\nref {Node}：要滚动的节点\noptions {Object}:\n    offset {Number} [0]：一个到其可见位置的偏移距离\n    animated {Boolean} [true]：是否需要附带滚动动画\n!!\n\n··js\nconst dom = weex.requireModule('dom')\n\ndom.scrollToElement(this.$refs.item10[0], { offset: 10 })\n··\n\n#### getComponentRect(ref, callback)\n\n通过标签的 ref 获得其布局信息，返回的信息在 callBack 中：\n\n··js\n{\n    result: true,\n    size: {\n        bottom: 60,\n        height: 15,\n        left: 0,\n        right: 353,\n        top: 45,\n        width: 353\n    }\n}\n··\n\n如果想要获取视口信息，可以指定·ref·为字符串·'viewport'·，即·getComponentRect('viewport', callback)·\n\n### modal\n\n··js\nconst modal = weex.requireModule('modal')\n\n// 提示消息\nmodal.toast({\n    message, // {String} 消息\n    duration // {Number} [3] 持续的时间，单位 s，Android 大于 3 秒会使用系统变量 LONG，否则是 SHORT\n})\n\n// 提示框\nmodal.alert({\n    message, // {String} 消息\n    okTitle, // {String} [OK] 确定按钮的文字\n}, callback)\n\n// 确认框\nmodal.confirm({\n    message, // {String} 消息\n    okTitle, // {String} [OK] 确定按钮的文字\n    cancelTitle // {String} [Cancel] 取消按钮的文字\n}, callback(res)) // res 为确定按钮上的文字\n\n// 提示输入框\nmodal.prompt({\n    message, // {String} 要提示的消息\n    okTitle, // {String} [OK] 确定按钮的文字\n    cancelTitle // {String} [Cancel] 取消按钮的文字\n}, callback(res) // res 为一个对象，参数如下\n    result // {String} 按下的按钮上的文字\n    data // {String} 用户输入的信息\n)\n··\n\n### picker\n\n#### pick(options, [callback])：单选\n\n!!\noptions：样式参数\n    items {Array}：数据源\n    index {Number}：默认选中的选项\n    textColor {Color}：选项文字的颜色\n    selectionColor {Color}：选中项的背景色\n    confirmTitle {String}：确认按钮的文字\n    cancelTitle {String}：取消按钮的文字\n    confirmTitleColor {Color}：确认按钮的文字颜色\n    cancelTitleColor {Color}：取消按钮的文字颜色\n    title {String}：对话框的标题\n    titleColor {Color}：对话框标题的文字颜色\n    titleBackgroundColor {Color}：对话框标题的背景色\ncallback {Function(res)}：选择完的回调函数。res 参数属性如下\n    result {String}：结果说明·success cancel error·\n    data {Number}：选择的选项，仅·success·时存在\n!!\n\n#### pickDate(options, [callback])：日期选择\n\n!!\noptions {Object}：选项参数\n    value {String}：必填，默认选中的选项，时间格式为·yyyy-MM-dd·\n    max {String}：可选，·date·的最大值\n    min {String}：可选，·date·的最小值\ncallback {Function(res)}：选择完的回调函数。res 参数属性如下\n    result {String}：结果说明·success cancel error·\n    data {String}：选择的值，格式为·yyyy-MM-dd·，仅·success·时存在\n!!\n\n#### pickTime(options, [callback])：时间选择\n\n!!\noptions {Object}：选项参数\n    value {String}：必填，默认选中的选项，时间格式为·HH:mm·\ncallback {Function(res)}：选择完的回调函数。res 参数属性如下\n    result {String}：结果说明·success cancel error·\n    data {String}：选择的值，格式为·HH:mm·，仅·success·时存在\n!!\n\n### stream\n\n网络请求：·stream.fetch(options, callback, [progressCallback])·\n\n!!\noptions {Object}：请求的选项\n    method {String}：·GET/POST·，GET 请求不支持·body·方式传递参数，需在·url·后面加上查询字符串\n    url {String}：请求地址\n    type {String}：响应类型·json text jsonp·\n    headers {Object}：请求头\n    body {String}：请求体，如果是 JSON 格式需先将其转为字符串\ncallback {Function(res)}：响应结果回调，res 参数属性如下\n    status {Number}：返回的状态码\n    ok {Boolean}：如果状态码在 200~299 之间就为真\n    statusText {String}：状态描述文本\n    data {Object/String}：返回的数据，请求类型是·json jsonp·为 Object，·text·为 String\n    headers {Object}：响应头\nprogressCallback {Function(res)}：关于请求状态的回调，在请求完成后被调用，res 参数属性如下\n    readyState {Number}：当前状态，数字说明如下\n        1：state，请求连接中\n        2：opened，返回响应头中\n        3：received，正在加载返回数据\n    status {Number}：响应状态码\n    length {Number}：已经接受到的数据长度，可以从响应头中获取总长度\n    statusText {String}：状态文本\n    headers {Object}：响应头\n!!\n\n#### 注意\n\n默认·Content-Type·是·application/x-www-form-urlencoded·，如果需要通过 POST json，需设为·application/json·\n如果请求地址带有中文需先用·encodeURI()·或·encodeURIComponent()·进行转码\n\n## 事件\n\n!!\nclick：点击\nlongpress：长按\nswipe：轻扫，根据事件对象的·type·可判断方向\nappear：当元素在屏幕上可见\ndisappear：当元素在屏幕上消失\npage（不支持网页端）：通过·viewappear·和·viewdisappear·切换页面前后触发\ntap：低延迟点击\ntouchstart：手指按下\ntouchmove：手指移动\ntouchend：手指抬起\ntouchcancel：触摸取消，比如手指按住屏幕的时候提示电量不足了、闹钟响了、打电话来了等\npan：拖动\npanstart：拖动开始\npanmove：拖动中\npanend：拖动结束\nhorizontalpan：水平拖动\nverticalpan：垂直拖动\n!!\n\n注意：在·scroller list webview·滚动容器上有些可能无效\n\n## 常见问题\n\n### css\n\n!!\ndisplay：\n    默认且唯一支持·display: flex·，且默认·flex-direction: column;·\n    可使用·v-if·或·translate(100%)·或·absolute·代替·display: none;·和·v-show·\n    不支持·flex-shrink·和·flex-basis·\n    iOS 设置·flex-direction: row;·子元素横排无效，需再加一层·div·\nposition：\n    默认为·relative·\n    ·fixed·在 Android 会被当成·absolute·，可以再加一层父容器进行·absolute·\n    支持·sticky·定位\n    ·z-index·无效，用·v-if·渲染出来的元素层级会高点\nline-height：在 iOS 不会居中且贴近底部，可以用·padding·或·flex·居中\noverflow：在 Android 默认为·hidden·且无法修改\nmargin：不支持·auto·\n样式选择器：只支持·.class·，重复写后者会覆盖前者而不会合并，注意行内样式的权重是最低的\n滚动区域：不包括·padding·部分的\n长度单位：\n    只支持·px wx·，内容会自动适配好，宽度以·750px·基准\n    宽设为·100%·可以用·750px·或父容器设置·align-items: stretch;·\n    高设为·100%·可以用·flex-grow: 1;·或·flex-direction: row; align-items: stretch;·\n引入外部样式：例如·<style src=\"./common.css\"/>·\n其他：给·<scroller>·和·<list>·加高度在 Android 上大于屏幕会是 100%\n!!\n\n### js\n\n!!\n默认不会开启事件冒泡，需在每个·template·的最大父容器上添加·bubble=\"true\"·属性\n不支持事件冒泡和捕获，因此不支持事件修饰符，例如·.prevent .capture .stop .self·\nes6：支持·let const =>·，对象属性同名简写，不支持·for of·循环\n!!\n\n### vue\n\n!!\n组件\n    keep-alive：移动端的原生组件不能被前端缓存\n生命周期\n    activated：不支持·<keep-alive>·\n    deactivated：不支持·<keep-alive>·\n模板指令\n    v-html：Weex 中没有 HTML 解析器\n    v-show：不支持·display:none;·\n    v-cloak：不支持·[attr]·选择器，只支持·.class·\n实例方法\n    vm.$mount()：无需手动安装 Vue 实例\n选项\n    template：Weex 使用[只包含运行时构建](https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6)\n全局 API\n    Vue.compile：同 template\n全局配置\n    Vue.config.devtools：只在 Web 环境下支持\n    Vue.config.performance：只在 Web 环境下支持\n    Vue.config.keyCodes：在移动端不需要\n!!\n\n@@\n[weex 官方文档](https://weex.apache.org/zh/guide/introduction.html)\n[weex playground](https://weex.apache.org/zh/guide/playground.html)\n[github - awesome-weex](https://github.com/joggerplus/awesome-weex)\n@@\n\n&2020/07/26\n            "}}},a=i,s=t("2877"),l=Object(s["a"])(a,o,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0b30f5.7492b35a.js.map