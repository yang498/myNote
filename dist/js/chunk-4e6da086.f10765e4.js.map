{"version":3,"sources":["webpack:///./src/pages/article/html/applet.vue?728d","webpack:///src/pages/article/html/applet.vue","webpack:///./src/pages/article/html/applet.vue?36a6","webpack:///./src/pages/article/html/applet.vue","webpack:///./src/assets/img/applet01.jpg"],"names":["render","_vm","this","_h","$createElement","_c","_self","domProps","_s","format","text","staticRenderFns","component","module","exports"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,SAAS,CAAC,UAAYN,EAAIO,GAAGP,EAAIQ,OAAOR,EAAIS,WAClJC,EAAkB,G,qBCKtB,GACE,KADF,WAEI,MAAJ,CACM,KAAN,uqbA2kBA,IA3kBA,4oZCT8W,I,YCO1WC,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAC,E,8BClBfC,EAAOC,QAAU,IAA0B","file":"js/chunk-4e6da086.f10765e4.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{domProps:{\"innerHTML\":_vm._s(_vm.format(_vm.text))}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div v-html=\"format(text)\"></div>\r\n</template>\r\n\r\n<script>\r\nimport img1 from '@/assets/img/applet01.jpg'\r\nexport default {\r\n    data () {\r\n        return {\r\n            text: `\r\n# 微信小程序\r\n\r\n本文档记录版本·v2.12.0·\r\n\r\n## 概述\r\n\r\n微信小程序和网页：\r\n\r\n!!\r\n代码差异不大：小程序也是用 JavaScript，从网页开发迁移到小程序的开发成本并不高\r\n页面的样式和功能：微信小程序有更多封装的模块以及微信生态，例如组件中的 picker、map，API 中的扫码、支付等\r\n兼容适配：web 要考虑到多种兼容性，而小程序只需要处理 iOS 和 Android 的微信客户端，并有自适应单位 rpx\r\n数据管理：小程序有微信后台可以查看流量数据、管理和运营\r\n体验：小程序旨在用完即走，加上运营规则，避免了大部分的营销、刷流量、广告等违规内容\r\n!!\r\n\r\n### 起步\r\n\r\n!!\r\n首先[注册](https://mp.weixin.qq.com/wxopen/waregister?action=step1)一个小程序帐号，通过这个帐号你就可以管理你的小程序\r\n    也可以通过已注册的订阅号或服务号在关联小程序时快速注册，沿用之前的资质\r\n一个帐号只能发布一个小程序，同一个主体身份下个人帐户可创建 5 个、企业 50 个的小程序账号\r\n[下载微信开发者工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201861)来开发小程序\r\n    需要填写的小程序·AppID·，登录[小程序平台](https://mp.weixin.qq.com)，在菜单【设置 - 开发设置】可以看到\r\n!!\r\n\r\n### 公众号关联小程序\r\n\r\n公众号关联小程序后，将可在图文消息、自定义菜单、模板消息等功能中使用小程序。关联规则：\r\n\r\n!!\r\n所有公众号都可以关联小程序。\r\n一个公众号可关联 10 个同主体的小程序，3 个不同主体的小程序。\r\n一个小程序可关联 500 个公众号。\r\n公众号一个月可新增关联小程序 13 次，小程序一个月可新增关联 500 次。\r\n!!\r\n\r\n关联流程：登录公众号后台 - 小程序 - 小程序管理 - 添加 - 关联小程序\r\n\r\n### 常见问题\r\n\r\n!!\r\n小程序代码包大小限制为 2M，如果太大可考虑分包加载，应考虑尽量少使用本地图片和类库，改为从网络加载\r\n·background-image·不能使用本地图片，可用网络图片或·base64·，或改用·<image/>·标签\r\n获取输入框中的内容可以使用·bindinput·或·bindblur·事件\r\niOS 上页面最后的元素·margin-bottom·无效，所以在页面底部留白的还是改用空高·<view>·或父容器·padding·\r\n自定义弹窗阻止页面滑动：在遮罩和弹窗容器上·catchtouchmove·一个空方法，若弹窗是可滚动的则只在遮罩上使用\r\n    如果页面是·<srcoll-view>·则可以改成在弹窗出现时将页面·<srcoll-view>·的·scroll-y·设为·false·\r\n!!\r\n\r\n### 相关小程序\r\n\r\n!!\r\n小程序示例：展示官方 demo\r\n小程序开发助手：展示开发过的小程序、成员预览时间、小程序更新前后大小\r\n小程序数据助手：展示用户的流量数据\r\n小游戏数据助手：展示小游戏的流量数据\r\n公众平台助手：管理公众号的消息留言通知、流量数据\r\n!!\r\n\r\n## 框架\r\n\r\n### 文件结构\r\n\r\n小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。\r\n一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：\r\n\r\n!!\r\napp.js!：小程序逻辑，公共js，例如声明全局变量\r\napp.json!：小程序公共设置\r\napp.wxss：小程序公共样式表\r\n!!\r\n\r\n一个小程序页面由四个文件组成，分别是：\r\n\r\n!!\r\n.wxml!：页面结构\r\n.wxss：页面样式表\r\n.js!：页面逻辑\r\n.json：页面配置\r\n!!\r\n\r\n**注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。**\r\n\r\n### app.js\r\n\r\n每个页面有独立的作用域，并提供模块化能力。\r\n由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力无法使用，如·document·，·window·等。\r\n\r\n#### App()\r\n\r\nApp() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。\r\n\r\n!!\r\nonLaunch：生命周期函数 - 小程序初始化，全局只触发一次，可接受一个参数对象，属性：\r\n    path {String}：打开小程序的路径\r\n    query {Object}：打开小程序的携带的参数\r\n    scene {Number}：打开小程序的场景值\r\n    shareTicket {String}：shareTicket，详见转发\r\n    referrerInfo {Object}：当场景为由从另一个小程序或公众号或App打开时，返回此字段\r\n        appId {String}：来源小程序或公众号或App的 appId\r\n        extraData {Object}：来源小程序传过来的数据，·scene=1037·或·1038·时支持\r\nonShow：生命周期函数 - 小程序显示，当小程序启动，或从后台进入前台显示，可接受一个参数对象，属性同 onLaunch\r\nonHide：生命周期函数 - 小程序隐藏，当小程序从前台进入后台\r\nonError：错误监听函数，当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息\r\nonPageNotFound：页面不存在监听函数，必须是同步处理，异步处理（例如 setTimeout 异步执行）无效\r\n    path {String}：不存在页面的路径\r\n    query {Object}：打开不存在页面的query\r\n    isEntryPage {Boolean}：是否本次启动的首个页面（例如从分享等入口进来，首个页面是开发者配置的分享页面）\r\n其他：开发者可以添加任意的函数或数据到参数中，用 this 可以访问\r\n!!\r\n\r\n#### 前台、后台定义\r\n\r\n当用户点击右上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；\r\n当再次进入微信或再次打开小程序，又会从后台进入前台\r\n只有当小程序进入后台一定时间（一般是 5 分钟），或者系统资源占用过高，才会被真正的销毁\r\n\r\n#### 关闭小程序\r\n\r\n当用户从扫一扫、转发等入口（场景值为1007, 1008, 1011, 1025）进入小程序，且没有置顶小程序的情况下退出\r\n\r\n#### 生命周期示意图\r\n\r\n![600](https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png)\r\n\r\n#### getApp()\r\n\r\n全局的 getApp() 函数可以用来获取或修改小程序实例\r\n\r\n··js\r\n// app.js\r\nApp({\r\n    globalData: 'I am global data'\r\n})\r\n\r\n// other.js\r\nvar app = getApp()\r\nconsole.log(app.globalData) // I am global data\r\napp.globalData = '来自 app.js 的 globalData'\r\nconsole.log(app.globalData) // 来自 app.js 的 globalData'\r\n··\r\n\r\n#### 注意\r\n\r\n!!\r\n·App()·必须在·app.js·中注册，且不能注册多个\r\n不要在定义于·App()·内的函数中调用·getApp()·，使用·this·就可以拿到·app·实例\r\n不要在·onLaunch·的时候调用·getCurrentPages()，此时·page·还没有生成\r\n通过·getApp()·获取实例之后，不要调用生命周期函数\r\n!!\r\n\r\n### Page.js\r\n\r\n·Page()·函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。\r\n\r\n!!\r\ndata：页面的数据\r\nonLoad：生命周期函数- 页面加载，直到关闭当前页面栈再进入当前页面才会再次触发\r\nonReady：生命周期函数- 页面初次渲染完成，直到关闭当前页面栈再进入当前页面才会再次触发\r\nonShow：生命周期函数- 页面显示，每次打开页面都会调用一次\r\nonHide：生命周期函数- 页面隐藏，每次关闭页面都会调用一次\r\nonUnload：生命周期函数- 页面卸载，当当前页面栈被关闭时触发一次\r\nonPullDownRefresh：页面下拉刷新，当处理完数据刷新后·wx.stopPullDownRefresh()·可以停止下拉刷新\r\n    需在·app.json·的·window·选项或当前页面的·json·文件设置·enablePullDownRefresh·为·true·\r\nonReachBottom：页面上拉触底。在触发距离内滑动期间只会被触发一次\r\n    在·app.json·的·window·选项或当前页面的·json·文件设置触发距离·onReachBottomDistance·，默认为·50·\r\nonShareAppMessage：用户点击右上角转发，设置该函数右上角菜单才会显示转发选项\r\nonPageScroll：监听页面滚动，每次页面滚动时触发，返回参数：\r\n    scrollTop {Number}：页面在垂直方向已滚动的距离（单位px）\r\nonTabItemTap：当前是 tab 页时，点击 tab 时触发，可用于回到顶部或刷新等\r\n其他：开发者可以添加任意的函数或数据到参数中，在页面的函数中用·this·可以访问\r\n!!\r\n\r\n#### Page.prototype.route\r\n\r\n·route·字段可以获取到当前页面的路径\r\n\r\n··\r\nPage({\r\n    onLoad: function () {\r\n        console.log(this.route)\r\n    }\r\n})\r\n··\r\n\r\n#### Page.prototype.setData()\r\n\r\n·setData·函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的·this.data·的值（同步），参数：\r\n\r\n!!\r\ndata {Object}!：这次要改变的数据\r\n    key：要改变的·data·的键名，以数据路径的形式给出，如·'array[2].message'·、·'a.b.c.d'·，\r\n        可以不在·this.data·中预先定义\r\n    value：要改变的·data·的键值\r\ncallback {Function}!：回调函数，在这次·setData·对界面渲染完毕后调用\r\n!!\r\n\r\n**注意：**\r\n\r\n!!\r\n直接修改·this.data·而不调用·this.setData·是无法改变页面的状态的，还会造成数据不一致。\r\n单次设置的数据不能超过 1024kB，请尽量避免一次设置过多的数据。\r\n请不要把·data·中任何一项的·value·设为·undefined·，否则这一项将不被设置并可能遗留一些潜在问题\r\n!!\r\n\r\n··js\r\nPage({\r\n    data: {\r\n        array: [],\r\n        object: {}\r\n    },\r\n    onLoad: function (options) {\r\n        const age = 'age'\r\n        this.setData({\r\n            name: 'Tom', // key 为普通字符串，可不用引号\r\n            'array[0]': 'changed data', // array 和下标表示需要加引号\r\n            'object.text': 'changed data' // object 的 key 表示需要加引号\r\n            [age]: 20 // age 是个变量，用 [] 包裹\r\n        })\r\n\r\n        // 当 key 是个链式写法还带变量时，不加引号语法错误，加引号又无法表示变量\r\n        const index = 0\r\n        this.setData({ array[index].text: 'new data' })\r\n        this.setData({ 'array[index].text': 'new data' })\r\n        // 所以可以使用先赋值改变再 setData 的方式\r\n        this.data.array[index].text = 'new data'\r\n        this.setData({ array: this.data.array })\r\n\r\n        // 假如要一次性修改很多数据，建议先修改 data，再 setData，这样只会渲染一次，减少性能消耗\r\n        for (let i = 0; i < 100; i++) this.data.array.push(i)\r\n        this.setData({ array: this.data.array })\r\n    }\r\n})\r\n··\r\n\r\n#### 路由\r\n\r\n·getCurrentPages()·：获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面\r\n不要尝试修改页面栈，会导致路由以及页面状态错误\r\nTab 切换对应生命周期，以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例：\r\n\r\n%%\r\n| 当前页面 | 路由后页面 | 触发的生命周期（按顺序） |\r\n| :-: | :-: | :-: |\r\n| A | B | A.onHide()，B.onLoad()，B.onShow() |\r\n| A | B（再次打开） | A.onHide()，B.onShow() |\r\n| C | A | C.onUnload()，A.onShow() |\r\n| C | B | C.onUnload()，B.onLoad()，B.onShow() |\r\n| D | B | D.onUnload()，C.onUnload()，B.onLoad()，B.onShow() |\r\n| D（从转发进入） | A | D.onUnload()，A.onLoad()，A.onShow() |\r\n| D（从转发进入） | B | D.onUnload()，B.onLoad()，B.onShow() |\r\n%%\r\n\r\n### 模块化\r\n\r\n在 JavaScript 文件中声明的变量和函数只在该文件中有效，可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块\r\n模块只有通过·module.exports·或者·exports·才能对外暴露接口\r\n注意·exports·是·module.exports·的一个引用，更推荐用·module.exports·\r\n并且·require()·返回的是·module.exports·而不是·exports·\r\n小程序目前不支持引入·node_modules·，开发者需要使用到·node_modules·时候拷贝出相关的代码到小程序的目录中\r\n\r\n··js\r\n// util.js\r\nfunction sayHello(name) {\r\n    console.log(\\`Hello \\${name} !\\`)\r\n}\r\nmodule.exports = {\r\n    sayHello\r\n}\r\n\r\n// 其他 js 文件，使用 require() 引入，只支持相对路径，不支持绝对路径\r\nconst util = require('util.js')\r\nPage({\r\n    helloMINA: function() {\r\n        util.sayHello('MINA')\r\n    }\r\n})\r\n··\r\n\r\n### 事件\r\n\r\n绑定：\r\n\r\n!!\r\nbind：冒泡\r\ncatch：不冒泡\r\ncapture-bind：捕获\r\ncapture-catch：取消冒泡和中断捕获\r\n!!\r\n\r\n类型：\r\n\r\n!!\r\ntouchstart：手指触摸动作开始\r\ntouchmove：手指触摸后移动\r\ntouchend：手指触摸动作结束\r\ntouchcancel：手指触摸动作被打断，如来电提醒，弹窗\r\ntap：手指触摸后马上离开（也就是点击事件）\r\nlongpress：长按 350ms 触发，该事件触发后 tap 事件将不被触发\r\ntransitionend：在 WXSS transition 或·wx.createAnimation·动画结束后触发\r\nanimationstart：在 WXSS animation 动画开始时触发\r\nanimationiteration：在 WXSS animation 一次迭代结束时触发\r\nanimationend：在 WXSS animation 动画完成时触发\r\ntouchforcechange：在支持 3D Touch 的 iPhone 设备，重按时会触发\r\n其他事件属于特定组件如·submit input scroll·，无特殊声明的都是不冒泡事件\r\n特殊事件：·<canvas/>·中的触摸事件不可冒泡，所以事件对象没有·currentTarget·\r\n!!\r\n\r\n写法：·bindtap=\"eventName\"·或·bind:tap=\"eventName\"·\r\n传参：在 wxml 元素上自定义的以·data-·开头的属性，多个单词用-连接，通过事件对象·e.currentTarget.dataset·可拿到\r\n\r\n··js\r\n// <view bindtap=\"onclick\" data-name=\"foo\">click me</view>\r\n\r\nPage({\r\n    onclick(e) {\r\n        console.log(e.currentTarget.dataset.name)   // foo\r\n    }\r\n})\r\n··\r\n\r\n事件对象：\r\n\r\n··js\r\neventName(e) {\r\n    e: {\r\n        \"type\"：\"tap\", // 事件类型\r\n        \"timeStamp\"：895, // 事件生成时的时间戳，从页面打开开始计算\r\n        \"target\"：{ // 事件的目标对象属性\r\n            \"id\"：\"tapTest\", // 对象元素的 id 值\r\n            \"dataset\"：{ // wxml 中定义的 data- 数据，即靠 data- 可传参，属性名会转换成驼峰\r\n                \"hi\"：\"WeChat\"\r\n            },\r\n            \"offsetLeft\"：9 // 相对于父容器且不包括 padding 和滚动条的 px 单位距离\r\n            \"offsetTop\"：6\r\n        },\r\n        \"currentTarget\"：{ // 事件的当前对象属性\r\n            \"id\"：\"tapTest\",\r\n            \"dataset\"：{\r\n                \"hi\"：\"WeChat\"\r\n            },\r\n            \"offsetLeft\"：12,\r\n            \"offsetTop\"：18\r\n        },\r\n        \"detail\"：{ // 事件的信息\r\n            \"x\"：53, // 同pageX\r\n            \"y\"：14\r\n        },\r\n        \"touches\"：[{ // 触摸点信息\r\n            \"identifier\"：0, // 触摸点的标识符\r\n            \"pageX\"：53, // 相对于文档的距离，包括滚动距离\r\n            \"pageY\"：14,\r\n            \"clientX\"：53, // 相对于屏幕除了导航栏的距离\r\n            \"clientY\"：14\r\n        }],\r\n        \"changedTouches\"：[{ // 变化的触摸点信息\r\n            \"identifier\"：0,\r\n            \"pageX\"：53,\r\n            \"pageY\"：14,\r\n            \"clientX\"：53,\r\n            \"clientY\"：14\r\n        }],\r\n        canvasTouch：[{ // canvas 专属的触摸点信息\r\n            \"identifier\"：0, // 触摸点的标识符\r\n            \"x\"：53, // 相对于 canvas 左上角的距离\r\n            \"y\"：14,\r\n        }]\r\n    }\r\n}\r\n··\r\n\r\n## wxml\r\n\r\n### {{ }}\r\n\r\n··html\r\n<view>{{ message }}</view> <!-- 文本内容 -->\r\n<view id=\"item-{{ id }}\"></view> <!-- 组件属性 -->\r\n<view>{{ a + b }} + {{ c }} + d</view> <!-- 算数运算 -->\r\n\r\n<!-- 注意花括号和引号之间如果有空格，将最终被解析成为字符串 -->\r\n<view wx:for=\"{{ [1, 2, 3] }} \">{{ item }}</view>\r\n<!-- 等同于 -->\r\n<view wx:for=\"{{ [1, 2, 3] + ' ' }}\">{{ item }}</view>\r\n··\r\n\r\n### wx:for\r\n\r\n··html\r\n<!-- 循环数组默认当前下标为 index，当前项为 item -->\r\n<view wx:for=\"{{ array }}\">{{ index + 1 }}、{{ item }}</view>\r\n\r\n<!-- wx:for-index 为重命名 index，wx:for-item 为重命名 item -->\r\n<view wx:for=\"{{ array }}\" wx:for-index=\"i\" wx:for-item=\"name\">{{ i + 1 }}、{{ name }}</view>\r\n\r\n<!-- 循环对象则 index 为 key，item 为 value -->\r\n<view wx:for=\"{{ obj }}\">{{ index }}：{{ item }}</view>\r\n··\r\n\r\n#### wx:key\r\n\r\n如果列表中项目的位置会动态改变，并且希望保持状态（如·<input/>·中的输入内容），需使用·wx:key·指定唯一的标识符\r\n当数据改变触发重新渲染时，带有·wx:key·的组件会重新排序而不是重新创建，并能提高列表渲染效率\r\n如不提供·wx:key·控制台会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以忽略\r\n·wx:key·的值以两种形式提供：\r\n\r\n!!\r\nString：循环中 item 的某个属性，该属性需要是列表中唯一的字符串或数字，且不能动态改变\r\n*this：循环中 item 本身，需要 item 本身是一个唯一的字符串或者数字\r\n!!\r\n\r\n··html\r\n<switch wx:for=\"{{ objectArray }}\" wx:key=\"unique\">{{ item.id }}</switch>\r\n<switch wx:for=\"{{ numberArray }}\" wx:key=\"*this\">{{ item }}</switch>\r\n\r\n<script>\r\nPage({\r\n    data: {\r\n        objectArray: [\r\n            { id: 0, unique: 'unique_0' },\r\n            { id: 1, unique: 'unique_1' },\r\n            { id: 2, unique: 'unique_2' }\r\n        ],\r\n        numberArray: [1, 2, 3, 4]\r\n    }\r\n})\r\n&lt;/script>\r\n··\r\n\r\n### wx:if / elif / else\r\n\r\n··html\r\n<view wx:if=\"{{condition}}\"> True </view>\r\n··\r\n\r\n·wx:elif·和·wx:else·：\r\n\r\n··\r\n<view wx:if=\"{{length > 5}}\"> 1 </view>\r\n<view wx:elif=\"{{length > 2}}\"> 2 </view>\r\n<view wx:else> 3 </view>\r\n··\r\n\r\n### hidden\r\n\r\n隐藏元素，即使用·display:none·\r\n\r\n··html\r\n<view hidden> True </view>\r\n··\r\n\r\n### 模板\r\n\r\n#### template\r\n\r\n在模板页面中定义代码片段，然后在不同的地方调用，只在当前页面使用。\r\n使用·name·属性，作为模板的名字。然后在·<template/>·内定义代码片段，如：\r\n\r\n··html\r\n<template name=\"msgItem\">\r\n    <view class=\"demo\">\r\n        <text> {{ index }}: {{ msg }} </text>\r\n        <text> Time: {{ time }} </text>\r\n    </view>\r\n</template>\r\n··\r\n\r\n使用·is·属性指定 template 的·name·，然后传入所需要的·data·，如：\r\n\r\n··html\r\n<!-- 引入 -->\r\n<import src=\"../../components/dome/dome.wxml\"/>\r\n<template is=\"msgItem\" data=\"{{ ...item }}\"/>\r\n\r\n<script>\r\nPage({\r\n    data: {\r\n        item: {\r\n            index: 0,\r\n            msg: 'this is a template',\r\n            time: '2016-09-15'\r\n        }\r\n    }\r\n})\r\n&lt;/script>\r\n··\r\n\r\n·import·有作用域范围，不会嵌套引入，如：C import B，B import A，C 不会有 A 的内容\r\n\r\n#### include\r\n\r\n可以将目标文件除了·<template/>·和·<wxs/>·代码外的整个代码引入，相当于是拷贝到·include·位置，如：\r\n\r\n··html\r\n<!-- header.wxml -->\r\n<view> header </view>\r\n\r\n<!-- footer.wxml -->\r\n<view> footer </view>\r\n\r\n<!-- index.wxml -->\r\n<include src=\"header.wxml\"/>\r\n<view> body </view>\r\n<include src=\"footer.wxml\"/>\r\n··\r\n\r\n### wxss\r\n\r\napp.wxss 为全局样式，page 的 wxss 文件为局部样式，与 CSS 相比多了尺寸单位·rpx·\r\n·rpx·根据·750rpx·屏幕宽度进行自适应，例如：\r\niPhone6 的屏幕宽度为·375px·，共有 750 个物理像素，·1rpx = 0.5px = 1物理像素，1px = 2rpx·\r\n在 iPhone5 下·1rpx = 0.42px，1px = 2.34rpx·\r\n在 iPhone6 Plus 下·1rpx = 0.552px，1px = 1.81rpx·\r\n开发时可以以 iPhone6 作为参考标准\r\n\r\n### wxs\r\n\r\n!!\r\nWXS 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行\r\nWXS 与 JavaScript 是不同的语言，有自己的语法，并不和 JavaScript 一致\r\nWXS 的运行环境和其他 js 代码是隔离的，不能调用其他 js 文件中定义的函数，也不能调用小程序的 API\r\nWXS 函数不能作为组件的事件回调\r\n!!\r\n\r\nWXS 代码编写在 wxml 文件中的·<wxs>·标签内，或以·.wxs·为后缀名的文件然后引入·<wxs src=\"xxx.wxs\" module=\"x\" />·\r\n每一个·.wxs·文件和·<wxs>·标签都是一个单独的模块。通过·module.exports·可以导出\r\n在 .wxs 模块中可以使用·require()·引用其他 wxs 文件模块。需注意：\r\n\r\n!!\r\n只能引用·.wxs·文件模块，且必须使用相对路径\r\nwxs 模块均为单例，在第一次被引用时会初始化，其他地方多次引用的都是同一个 wxs 模块对象\r\n如果一个 wxs 模块在定义之后，一直没有被引用，则该模块不会被解析与运行\r\n·<wxs>·模块只能在定义模块的 WXML 文件中被访问到。使用·<include>·或·<import>·时，·<wxs>·模块不会被引入\r\n·<template>·标签中，只能使用定义该·<template>·的 WXML 文件中定义的·<wxs>·模块\r\n!!\r\n\r\n### 自定义组件\r\n\r\n和页面一样由·json wxml wxss js·4个文件组成。要在·json·文件中声明：\r\n\r\n··js\r\n{\r\n    \"component\": true\r\n}\r\n··\r\n\r\n区别在于 js 不是·Page()·而是·Component()·，[参考官方文档](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/)\r\n使用自定义组件前先要在页面的 json 文件中进行引用声明，key 为指定自定义组件的名称，value 为自定义组件的路径：\r\n\r\n··js\r\n{\r\n    \"usingComponents\": {\r\n        \"component-tag-name\": \"/components/demo/demo\"\r\n    }\r\n}\r\n··\r\n\r\n注意：\r\n\r\n!!\r\n因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符\r\n自定义组件和使用自定义组件的页面所在项目根目录名不能以·wx-·为前缀，否则会报错\r\n!!\r\n\r\n#### tips\r\n\r\n假设·form·是传递给组件的数据，若在计时过程中使用·this.setData({ 'form.code.text': time + '秒' })·会触发视图渲染刷新，导致·picker·这类弹出式组件在渲染时被收起或报错\r\n解决：把计时的变量抽离出来，例如改成使用组件属性传值或改成 slot 插槽，这样就不影响 form 本身\r\n\r\n## 组件\r\n\r\n每个页面默认有个·<page></page>·父容器，可以不用添加最大父容器\r\n\r\n### 目录\r\n\r\n!!\r\n视图容器\r\n    view：视图容器，可以当成·div·标签\r\n    scroll-view：可滚动视图容器\r\n    swiper，swiper-item：轮播图和子项（子项宽高自动设置为 100%）\r\n    cover-image，cover-view：覆盖在原生组件上的图片和文本\r\n    movable-area，movable-view：可拖拽区域和拖拽子项\r\n    match-media：指定页面尺寸才显示的容器\r\n    block：常用于·wx:for wx:if·作为包含多个节点的容器，自身不在页面中渲染\r\n基础内容\r\n    icon：图标，目前有![auto,24](${img1})，注意·wxss·无法改变·color、size、line-height·\r\n    text：文本容器，内联元素\r\n    rich-text：富文本容器\r\n    progress：进度条\r\n表单\r\n    input，textarea：输入框，文本域\r\n    radio，radio-group：单选框，单选框组\r\n    checkbox，checkbox-group：多选框，多选框组\r\n    picker，picker-view，picker-view-column：选择器，行内选择器，选择器子项\r\n    button：按钮\r\n    slider：滑杆\r\n    switch：开关\r\n    form：表单容器\r\n    label：点击触发对应的控件\r\n    editor：富文本编辑器\r\n导航\r\n    functional-page-navigator：仅在插件中有效，用于跳转到插件功能页\r\n    navigator：页面链接，相当于·<a>·\r\n媒体\r\n    image：图片，默认宽 300px、高 225px（4 : 3）\r\n    audio，video，camera：音频，视频，相机\r\n    live-player，live-pusher：实时音视频播放和录制\r\n    voip-room：多人音视频对话\r\n地图\r\n    map：地图\r\n画布\r\n    canvas：画布\r\n开放能力\r\n    open-data：展示微信开放的数据，如用户信息和群名称\r\n    web-view：承载网页的容器，会自动铺满整个小程序页面。个人类型与海外类型的小程序暂不支持使用\r\n    ad：广告\r\n    official-account：公众号关注组件\r\n原生组件：\r\n    组件：·camera canvas input(focus 时) live-player live-pusher map textarea video·\r\n    说明：层级最高且部分 CSS 样式不支持等\r\n无障碍访问：\r\n    为了更好地满足视障人士对于小程序的访问需求，支持部分 ARIA 标签\r\n导航栏\r\n    navigation-bar：页面导航条配置节点\r\n页面属性配置节点\r\n    page-meta：用于指定页面的一些属性、监听页面事件\r\n!!\r\n\r\n### text\r\n\r\n!!\r\nselectable {Boolean} [false]：文本是否可选中\r\nspace {String} [false]：是否显示连续空格\r\n    ensp：中文字符空格一半大小\r\n    emsp：中文字符空格大小\r\n    nbsp：根据字体设置的空格大小\r\ndecode {Boolean} [false]：是否解码\r\n    可解析：·&amp;nbsp;· ·&amp;lt;· ·&amp;gt;· ·&amp;amp;· ·&amp;apos;· ·&amp;ensp;· ·&amp;emsp;·\r\n!!\r\n\r\n注意：各个操作系统的空格标准并不一致，<text/> 组件内只支持 <text/> 嵌套，除了文本节点以外的其他节点都无法长按选中\r\n\r\n### image\r\n\r\n!!\r\nsrc {String}：图片资源地址\r\nmode {String} [scaleToFill]：图片裁剪缩放模式\r\n    scaleToFill：宽高 100%\r\n    aspectFit：同·contain·\r\n    aspectFill：同·cover·\r\n    top | right | bottom | left | center：原图对应的位置，可单独使用或两两搭配\r\nlazy-load {Boolean} [false]：懒加载，只在·page·和·scroll-view·中有效\r\nbindload {HandleEvent}：加载完毕时触发，·event.detail = { height, width }·\r\nbinderror {HandleEvent}：加载错误时触发，·event.detail = { errMsg }·\r\n!!\r\n\r\n## API\r\n\r\n### 基础\r\n\r\n!!\r\nwx.canIUse：判断小程序的 API、回调、参数、组件等是否在当前版本可用\r\nwx.base64ToArrayBuffer，wx.arrayBufferToBase64：·Base64·和·ArrayBuffer·互转\r\nwx.getSystemInfo/Sync：异/同步获取系统信息\r\nwx.getUpdateManager：获取更新管理器\r\nwx.updateWeChatApp：跳转到更新微信页面\r\n!!\r\n\r\n### 路由\r\n\r\n!!\r\nwx.navigateTo：保留当前页面，跳转到应用内非 tabBar 的页面\r\nwx.redirectTo：关闭当前页面，跳转到应用内非 tabBar 的页面，所以不能退回\r\nwx.reLaunch：关闭所有页面，打开到任意页面，如果是 tabBar 则不能带参数\r\nwx.switchTab：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面（不会刷新 tabBar 页面），不能带参数\r\nwx.navigateBack：关闭当前页面，返回上一页面或多级页面（不会刷新返回的页面）\r\n!!\r\n\r\n··js\r\nwx.navigateTo({\r\n    url {String} // 路径，可带查询字符串\r\n    success {Function} // 成功的回调函数\r\n    fail {Function} // 失败的回调函数\r\n    complete {Function} // 完成的回调函数\r\n})\r\n\r\nwx.navigateBack({\r\n    delta {Number} [1] // 返回的页面数，可通过 getCurrentPages() 获取当前的页面栈情况\r\n})\r\n··\r\n\r\n### 界面\r\n\r\n!!\r\n交互：Toast 提示，Loading 加载，Modal 模态框，ActionSheet 操作菜单，Alert 页面返回确认框\r\n导航栏：导航条加载动画，设置页面标题，设置导航条的颜色，隐藏返回首页按钮\r\n背景：设置下拉背景字体、loading 图的样式，设置窗口的背景色\r\nTab Bar：显示隐藏，整体样式，某一项的内容，右上角红点，右上角文本\r\n字体：·wx.loadFontFace·加载网络字体\r\n下拉刷新：·wx.startPullDownRefresh·，·wx.stopPullDownRefresh·\r\n滚动：·wx.pageScrollTo·\r\n动画：Animation 可创建动画实例，然后调用相关方法进行动画，其实简单的动画用 wxss 即可\r\n置顶：·wx.setTopBarText· 设置置顶栏文字内容，小程序被置顶时生效\r\n自定义组件：·wx.nextTick· 延迟一部分操作到下一个时间片再执行（类似于 setTimeout）\r\n菜单：·wx.getMenuButtonBoundingClientRect· 获取菜单按钮（右上角胶囊按钮）的布局位置信息\r\n窗口：监听或取消窗口尺寸变化，PC 端可设置窗口大小\r\n键盘：监听或取消键盘高度变化，主动收起键盘，获取输入框的光标位置（focus 时）\r\n!!\r\n\r\n··js\r\nwx.showToast({\r\n    title {String} // 提示的内容\r\n    icon {String} // 图标，可选success、loading、none\r\n    image {String} // 自定义图标的本地路径，会覆盖icon\r\n    duration {Number} [1500] // 持续时间，单位ms\r\n    mask {Boolean} [false] // 是否显示透明蒙层，防止触摸穿透\r\n    success {Function} // 成功的回调函数\r\n    fail {Function} // 失败的回调函数\r\n    complete {Function} // 完成的回调函数\r\n})\r\nwx.hideToast() // 主动隐藏消息提示框\r\n\r\nwx.showLoading({\r\n    title {String} // 提示的内容\r\n    mask {Boolean} [false] // 是否显示透明蒙层，防止触摸穿透\r\n    success {Function} // 成功的回调函数\r\n    fail {Function} // 失败的回调函数\r\n    complete {Function} // 完成的回调函数\r\n})\r\nwx.hideLoading() // 隐藏loading提示框\r\n··\r\n\r\n### 网络\r\n\r\n!!\r\nwx.request：发起网络请求\r\nwx.downloadFile：下载文件\r\nwx.uploadFile：上传文件\r\nWebSocket：创建 WebSocket 连接\r\nmDNS：发起局域网网络请求\r\nUDP 通信：创建局域网内的 WebSocket 连接\r\n!!\r\n\r\n#### 说明\r\n需在小程序后台配置域名白名单，只支持·https·和·wss·协议。且不能使用·IP·或·localhost·或端口号\r\n在微信开发者工具中可开启不校验请求域名跳过服务器域名的校验，当然在线上环境还是会开启校验\r\n出于安全考虑·api.weixin.qq.com·不能被配置为服务器域名，只能在后台调用\r\n\r\n··js\r\nwx.request({\r\n    url {String} // 接口地址\r\n    data {Object/String/ArrayBuffer} // 请求的参数\r\n    header {Object} [{'content-type':'application/json'}] // 请求头，不能设置 Referer\r\n    method {String} [GET] // 请求方式（大写），OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT\r\n    dataType {String} [json] // 设置返回的数据格式，设为 json 会尝试对返回的数据做一次 JSON.parse\r\n    responseType {String} [text] // 设置响应的数据类型，可选 text、arraybuffer\r\n    success {Function(res)} // 成功的回调函数\r\n        res: {\r\n            data {Object/String/ArrayBuffer} // 返回的数据\r\n            statusCode {Number} // 返回的 HTTP 状态码\r\n            header {Object} // 返回的 HTTP Response Header\r\n        }\r\n    fail {Function} // 失败的回调函数\r\n    complete {Function} // 完成的回调函数\r\n})\r\n// 返回一个 requestTask 对象，可调用 abort() 中断请求\r\n··\r\n\r\n### 数据缓存\r\n\r\n!!\r\nwx.setStorage/Sync：异/同步本地缓存，单个 key 大小限制 1MB，总共大小限制为 10MB\r\nwx.getStorage/Sync：异/同步获取本地缓存\r\nwx.removeStorage/Sync：异/同步删除本地缓存\r\nwx.getStorageInfo/Sync：异/同步获取全部的本地缓存\r\nwx.clearStorage/Sync：异/同步清空全部的本地缓存\r\n周期性更新：设置自定义登录态\r\n!!\r\n\r\n### 媒体\r\n\r\n!!\r\n地图：创建地图实例，调用相关方法可操作地图\r\n图片：保存、预览图片和视频、获取信息、压缩、从客户端会话选择文件、选择图片或拍照\r\n视频：保存、视频编辑器、获取信息、压缩、选择视频或图片或拍摄，创建视频实例调用相关方法可操作\r\n音频：播放、多音频、创建音频实例调用相关方法可操作\r\n背景音频：播放、监听播放事件、获取背景音频管理器调用相关方法可操作\r\n实时音视频：创建实时音视频实例调用相关方法可操作\r\n录音：开始或结束录音（最多 1 分钟）、获取录音管理器调用相关方法可操作\r\n相机：创建相机实例调用相关方法可操作\r\n富文本：创建富文本编辑器实例调用相关方法可操作\r\n音视频合成：创建音视频处理容器将所有轨道合成一个视频\r\n实时语音：创建/退出实时语音通话、静音、监听成员说话/在线/视频变化、监听被动断开\r\n画面录制器：创建 WebGL 画面录制器\r\n视频解码器：创建视频解码器\r\n!!\r\n\r\n### 其他\r\n\r\n!!\r\n位置：获取当前位置或打开地图\r\n转发：获取转发信息或显示隐藏转发按钮\r\n画布：创建画布对象进行操作\r\n文件：保存、删除、获取本地缓存文件，或在新开页面打开文档（支持 office 和 pdf）\r\n开放接口：\r\n    登录：·wx.login·获取临时登录凭证，·wx.checkSession·校验 session_key 是否有效，用户越使用小程序越有效\r\n    用户信息：·wx.getUserInfo·获取用户信息，不建议使用，改为使用·<button>·获取\r\n    支付：·wx.requestPayment·发起微信支付\r\n    授权：·wx.authorize·提前向用户发起授权请求，不会实际调用对应接口，若已授权则直接调用成功\r\n    设置：·wx.openSetting·调起权限设置界面，·wx.getSetting·获取某项功能有没有被授权\r\n    其他：小程序跳转，账号信息，数据上报，数据分析，收货地址，卡券，发票，生物认证，微信运动，性能，微信红包\r\n设备：\r\n    常用：NFC，WiFi，蓝牙，联系人，剪贴板，屏幕，电话，扫码，\r\n    其他：外围设备，iBeacon，低功耗蓝牙，电量，网络，加速计，罗盘，设备方向，陀螺仪，性能，振动\r\nWorker：创建 Worker 线程\r\n第三方平台：获取第三方平台自定义的数据字段\r\nWXML：\r\n    wx.createSelectorQuery：返回一个 SelectorQuery 对象实例以获取节点信息\r\n    wx.createIntersectionObserver：用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见\r\n广告：创建激励视频或插屏广告组件\r\n!!\r\n\r\n### 转发说明\r\n\r\n在 Page 中定义·onShareAppMessage()·，右上角菜单才会显示转发按钮，返回一个对象用于自定义转发内容\r\n\r\n··js\r\nonShareAppMessage (res) {\r\n    res：{\r\n        from {String} // 转发事件来源。button：页面内转发按钮；menu：右上角转发菜单\r\n        target {Object} // 如果 from 值是 button，则 target 是触发这次转发事件的 button，否则为 undefined\r\n    }\r\n    return {\r\n        title // 转发的标题，默认为当前小程序名称\r\n        path // 转发的路径，默认为当前页面路径 ，必须是以 / 开头的完整路径\r\n        imageUrl // 图片路径，支持PNG及JPG，默认为当前页面的截图，长宽比是 5:4\r\n    }\r\n}\r\n··\r\n\r\n通常开发者希望转发出去的小程序被二次打开的时候能够获取到一些信息，例如群的标识\r\n调用·wx.showShareMenu·并且设置·withShareTicket·为·true·\r\n当转发到群聊后并被其他用户打开时，可以在·App.onLaunch()·或·App.onShow()·获取到·shareTicket·\r\n然后调用·wx.getShareInfo()·接口传入此·shareTicket·可以获取到转发信息\r\n注意单聊没有·shareTickets·，·shareTicket·仅在当前小程序生命周期内有效\r\n\r\n### WXML 节点信息说明\r\n\r\n·wx.createSelectorQuery()·：返回一个·SelectorQuery·对象实例，调用相关方法以获取相关节点：\r\n\r\n!!\r\nin(component)：选择自定义组件 component 内的节点\r\nselect(selector)：在当前页面下选择第一个匹配的节点，返回 NodesRef 对象实例，用于获取节点信息，支持：\r\n    ·#id、.class、#id, .class、.parent > .child、.parent .children·\r\n    ·.parent >>> .children·（选择组件内的元素）\r\nselectAll(selector)：在当前页面下选择所有匹配的节点，返回一个数组形式的 NodesRef 对象实例\r\nselectViewport()：选择显示区域，可用于获取显示区域的尺寸、滚动位置等信息，返回 NodesRef 对象实例\r\nexec([call])：执行所有的请求，请求结果按请求次序构成数组，在 call 的第一个参数中返回\r\n!!\r\n\r\n返回的 NodesRef 对象实例可调用的方法：\r\n\r\n!!\r\nboundingClientRect([call])：返回节点信息·id dataset left right top bottom width height·，单位 px\r\nscrollOffset([call])：返回·scroll-view viewport·滚动位置·id dataset scrollTop scrollLeft·，单位 px\r\ncontext：添加 Context 对象查询请求，支持 VideoContext、CanvasContext、LivePlayerContext 和 MapContext \r\nfields(fields, [call])：自定义获取节点的相关信息，返回值是 nodesRef 对应的 selectorQuery：\r\n    id {Boolean} [false]：是否返回节点 id\r\n    dataset {Boolean} [false]：是否返回节点 dataset\r\n    rect {Boolean} [false]：是否返回节点布局位置·left right top bottom·\r\n    size {Boolean} [false]：是否返回节点尺寸·width height·\r\n    scrollOffset {Boolean} [false]：是否返回节点的·scrollLeft scrollTop·（·scroll-view viewport·）\r\n    properties {StringArray} [[]]：指定属性名列表（id、class、style 和事件绑定的属性值不可获取）\r\n!!\r\n\r\n··js\r\nconst Query = wx.createSelectorQuery()\r\n\r\n// 获取某个节点的相关信息\r\nQuery.select('.demo').boundingClientRect(res => {\r\n    console.log(res)\r\n}).exec()\r\n\r\n// 获取多个节点的相关信息\r\nQuery.selectAll('.demo').boundingClientRect().exec(res => {\r\n    res.forEach(item => {\r\n        console.log(item)\r\n    })\r\n})\r\n\r\n// 获取 fields\r\nQuery.select('#demo').fields({\r\n    dataset: true,\r\n    size: true,\r\n    scrollOffset: true,\r\n    properties: ['scrollX', 'scrollY']\r\n}, res => {\r\n    res.dataset    // 节点的dataset\r\n    res.width      // 节点的宽度\r\n    res.height     // 节点的高度\r\n    res.scrollLeft // 节点的水平滚动位置\r\n    res.scrollTop  // 节点的竖直滚动位置\r\n    res.scrollX    // 节点 scroll-x 属性的当前值\r\n    res.scrollY    // 节点 scroll-y 属性的当前值\r\n}).exec()\r\n··\r\n\r\n### 微信支付说明\r\n\r\n首先开通[微信支付平台](https://pay.weixin.qq.com/index.php/core/home/login?return_url=%2F)，然后关联小程序\r\n在微信支付服务后台生成预支付交易单，参考[微信支付接口文档](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&index=1)\r\nURL 地址：·https://api.mch.weixin.qq.com/pay/unifiedorder·，参考[小程序支付统一下单接口](https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1&index=1)\r\n返回的结果都是小程序支付 API 的参数，所以请求成功后就可以调起支付·wx.requestPayment()·\r\n\r\n## 登录\r\n\r\n### wx.login\r\n\r\n\r\n调用·wx.login()·可获取临时登录凭证\r\n然后在服务器后台调用指定接口传入临时登录凭证可换取用户的 openid、session_key、unionid\r\n\r\n### 后台调用的接口\r\n\r\n··html\r\nhttps://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code\r\n··\r\n\r\n!!\r\nappid!：小程序唯一标识，在小程序后台或微信开发者工具可查看\r\nsecret!：小程序的 app secret，在小程序后台查看\r\njs_code!：·wx.login()·得到的 code\r\ngrant_type!：填写为·authorization_code·\r\n!!\r\n\r\n### 返回的结果\r\n\r\n!!\r\nopenid：用户唯一标识，每个用户的微信号对每个公众号有一个唯一的 OpenID\r\nsession_key：会话密钥，生成对比 signature 以校验数据的完整性和解密 encryptedData\r\nunionid：用户在开放平台的唯一标识符（满足UnionID下发条件才会出现）\r\n!!\r\n\r\n### session_key\r\n\r\n用于在服务器解密·wx.getUserInfo()·返回的敏感数据，为了数据安全不建议把·session_key·下发到小程序\r\n\r\n### unionid\r\n\r\n如果开发者拥有多个移动应用（例如在 APP 内使用了微信分享、微信支付）、网站应用（例如微信快捷登录）、和公众帐号\r\n微信针对用户在不同的应用下有唯一的·openId·，但·unionid·却是一样的\r\n所以·unionid·可以帮助识别不同公众账号下的用户是否是同一个人\r\n这样可以实现多个小程序、公众号、APP 之间数据互通。还可以去除重复关注的用户数统计真实的关注用户总数\r\n注意·unionid·不建议作为用户 ID，应该用 ·openid·。因为如果公众号的账号迁移了就无法识别出来原来的用户了\r\n而迁移小程序只要·appid·不变·openid·就不变\r\n\r\n#### 获得途径\r\n\r\n调用接口·wx.getUserInfo()·，从解密数据中获取 UnionID。注意本接口需要用户授权，需妥善处理拒绝授权后的情况\r\n如果开发者帐号下存在同主体的公众号，并且该用户已经关注了该公众号。可以通过·wx.login()·获取\r\n如果开发者帐号下存在同主体的公众号或移动应用，并且该用户已经授权登录过也可以通过·wx.login()·获取\r\n\r\n### 设计规范\r\n\r\n当开发者在小程序首页就调用·wx.getUserInfo()·或·wx.authorize()·时，会造成一进入小程序就出现授权弹窗\r\n这就导致了部分用户在不了解这个小程序前会点击拒绝，如果没有对拒绝的情况做处理又会因为不良体验而流失用户\r\n好的产品首页应该传递给用户产品理念，在需要展示用户信息的地方才去提示授权\r\n如果一定要用户登录或进行到需要登录时，可以将获取用户信息的·button·组件放置到页面中，并说明：\r\n为什么需要授权？ 需要用户的什么信息？ 授权有什么好处？\r\n接下来在页面上放置一个明显的登录按钮，建议不要有其他的点击区域，让用户专注登录\r\n用户可能会更改昵称和头像，建议定期更新信息\r\n\r\n## 工具\r\n\r\n### 介绍\r\n\r\n开发小程序需使用[微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)\r\n新建项目时需要在小程序后台注册后的 AppID，没有的话也可选择体验模式\r\n体验模式无法进行代码真机预览和上传等操作，部分 API 无法正常调用\r\n注意登录的微信号需要是该 AppID 的小程序后台绑定过的开发者\r\n各机型部分兼容性可能不一致，建议开发者需要在真机上检查真实表现\r\n\r\n### 快捷键\r\n\r\n!!\r\nshift + alt + F：格式化代码\r\nalt + ⬆：代码上移一行\r\nalt + ⬇：代码下移一行\r\nshift + alt + ⬆：复制并向上粘贴\r\nshift + alt + ⬇：复制并向下粘贴\r\nctrl + F：当前文件内搜索\r\nshift + ctrl + F：整个项目内搜索\r\nshift + ctrl + R：替换\r\nctrl + D：选择下一个匹配\r\nctrl + shift + L：选择所有匹配\r\n!!\r\n\r\n### 项目配置文件\r\n\r\n可以在项目根目录使用·project.config.json·文件对项目进行配置\r\n\r\n!!\r\nminiprogramRoot {Path String}：指定小程序源码的目录(需为相对路径)\r\nqcloudRoot {Path String}：指定腾讯云项目的目录(需为相对路径)\r\npluginRoot {Path String}：指定插件项目的目录(需为相对路径)\r\ncompileType {String}：编译类型，可选 miniprogram（小程序）、plugin（小程序插件）\r\nsetting {Object}：项目设置\r\n    es6 {Boolean}：是否启用 es5 转 es6\r\n    postcss {Boolean}：上传代码时样式是否自动补全\r\n    minified {Boolean}：上传代码时是否自动压缩\r\n    urlCheck {Boolean}：是否检查安全域名和 TLS 版本\r\nlibVersion {String}：基础库版本\r\nappid {String}：项目的 appid，只在新建项目时读取\r\nprojectname {String}：项目名字，只在新建项目时读取\r\npackOptions {Object}：打包配置选项，打包是预览 、上传时对项目进行的必须步骤\r\n    ignore  {Object Array}：忽略指定规则的文件或文件夹\r\n        type {String}：类型，可选folder（文件夹）、file（文件）、suffix（后缀）、prefix（前缀）\r\n        value {String}：路径或取值，不支持通配符、正则表达式。若是路径则以小程序目录为根目录\r\nscripts {Object}：自定义预处理\r\n    beforeCompile：编译前预处理命令\r\n    beforePreview：预览前预处理命令\r\n    beforeUpload：上传前预处理命令\r\n!!\r\n\r\n## 云开发\r\n\r\n无需搭建服务器即可使用云端能力。和开发者已经使用的云服务相互兼容，并不互斥\r\n\r\n%%\r\n| 能力 | 作用 | 说明 |\r\n| :-: | :-: | :- |\r\n| 云函数 | 无需自建服务器 | 在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码 |\r\n| 数据库 | 无需自建数据库 | 一个既可在小程序前端操作，也能在云函数中读写的 JSON 数据库 |\r\n| 存储 | 无需自建存储和 CDN | 在小程序前端直接上传/下载云端文件，在云开发控制台可视化管理 |\r\n| 云调用 | 原生微信服务集成 | 基于云函数免鉴权使用小程序开放接口的能力，包括服务端调用、获取开放数据等能力 |\r\n%%\r\n\r\n@@@\r\n[小程序官方文档](https://developers.weixin.qq.com/miniprogram/dev/framework)\r\n[小程序社区：疑难解答、教程、demo、资源](http://www.wxapp-union.com)\r\n[小程序club：同上](http://www.wxappclub.com)\r\n[知乎：如何入门微信小程序开发，有哪些学习资料？](https://www.zhihu.com/question/50907897)\r\n[知乎：「微信小程序」剖析（二）：框架原理  在浏览器上运行的猜想](https://zhuanlan.zhihu.com/p/22607204)\r\n[公众号：一起脱去小程序的外套和内衣 - 微信小程序架构解析](https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247485680&amp;idx=1&amp;sn=119e4d94a4d5e995700c0e9358a61dbb&source=41#wechat_redirect)\r\n@@@\r\n\r\n&2020/07/19\r\n            `\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./applet.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./applet.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./applet.vue?vue&type=template&id=5ec91524&\"\nimport script from \"./applet.vue?vue&type=script&lang=js&\"\nexport * from \"./applet.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/applet01.8e48d35a.jpg\";"],"sourceRoot":""}