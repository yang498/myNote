{"version":3,"sources":["webpack:///./src/pages/article/tool/git.vue?19c3","webpack:///src/pages/article/tool/git.vue","webpack:///./src/pages/article/tool/git.vue?80d7","webpack:///./src/pages/article/tool/git.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","domProps","_s","format","text","staticRenderFns","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,SAAS,CAAC,UAAYN,EAAIO,GAAGP,EAAIQ,OAAOR,EAAIS,WAClJC,EAAkB,GCItB,GACE,KADF,WAEI,MAAJ,CACM,KAAN,8zKCR2W,I,YCOvWC,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAC,E","file":"js/chunk-2d2244a8.5e3e8142.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{domProps:{\"innerHTML\":_vm._s(_vm.format(_vm.text))}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div v-html=\"format(text)\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data () {\r\n        return {\r\n            text: `\r\n# git\r\n\r\n## 介绍\r\n\r\n1991~2002 年，Linux 内核开源项目有着为数众多的参与者。 但绝大多数的维护工作都花在了提交补丁和保存归档的繁琐事务上\r\n2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码\r\n2005 年，开发 BitKeeper 的商业公司与 Linux 内核开源社区的合作关系结束，收回了 Linux 内核社区免费使用 BitKeeper 的权力\r\n这就迫使 Linux 开源社区（特别是 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统 - Git\r\n\r\n## 安装\r\n\r\n在 [Git 官网](https://git-scm.com/downloads) 下载安装\r\n这里使用命令行的形式，在项目目录中右键选择·Git Bash Here·，而会了命令行形式自然也理解了图形界面操作·Git GUI Here·\r\n\r\n### 使用项目托管平台\r\n\r\n在项目托管平台上建立账户，例如 GitHub、GitLab 等平台\r\n\r\n### 用户信息设置\r\n\r\n设置拥有的项目托管平台的用户名和邮件地址\r\n\r\n··bash\r\ngit config --global user.name \"<name>\"\r\ngit config --global user.email \"<email>\"\r\n··\r\n\r\n然后可以查看账户信息\r\n\r\n··bash\r\ngit config user.name\r\ngit config user.email\r\n··\r\n\r\n或查看账户全部信息\r\n\r\n··bash\r\ngit config --list\r\n··\r\n\r\n## 创建项目\r\n\r\n### 在项目托管平台创建\r\n\r\n在项目托管平台上建立项目，然后点击 clone 按钮即可复制远程项目的 url\r\n\r\n··bash\r\ngit clone <projectUrl>\r\n··\r\n\r\n然后项目就被克隆到本地了\r\n\r\n### 将已有的项目托管\r\n\r\n在项目托管平台上建立项目（最好和本地项目名称一致），然后点击 clone 按钮即可复制远程项目的 url\r\n\r\n··bash\r\ngit init\r\ngit remote add origin <projectUrl>\r\ngit add .\r\ngit commit -m \"初始化项目\"\r\ngit push origin master\r\n··\r\n\r\n## 常用命令\r\n\r\n### 概念\r\n\r\n![800](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\r\n\r\n!!\r\nWorkspace / Working：工作区（本地代码）\r\nIndex / Stage：暂存区（已 add）\r\nRepository：本地仓库（已 commit）\r\nRemote：远程仓库（例如 GitHub）\r\n!!\r\n\r\n### add\r\n\r\n··bash\r\n# 添加当前目录的所有文件到暂存区\r\ngit add .\r\n\r\n# 添加指定文件到暂存区\r\ngit add <file1> <file2> ...\r\n\r\n# 添加指定目录到暂存区\r\ngit add <dir>\r\n··\r\n\r\n### commit\r\n\r\n··bash\r\n# 提交暂存区到仓库区\r\ngit commit -m \"<message>\"\r\n\r\n# 提交暂存区的指定文件到仓库区\r\ngit commit <file1> <file2> ... -m \"<message>\"\r\n\r\n# 提交工作区直接到仓库区（不能提交新的文件）\r\ngit commit -am \"<message>\"\r\n\r\n# 使用一次新的 commit 替代上一次，如果代码没变化相当于改写 \"<message>\"\r\ngit commit --amend -m \"<message>\"\r\n··\r\n\r\n### branch\r\n\r\n··bash\r\n# 列出所有本地分支\r\ngit branch\r\n\r\n# 列出所有远程分支\r\ngit branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\ngit branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\ngit branch <branchName>\r\n\r\n# 切换到指定分支，并更新工作区\r\ngit checkout <branchName>\r\n\r\n# 新建一个分支，并切换到该分支\r\ngit checkout -b <branch>\r\n\r\n# 切换到上一个分支\r\ngit checkout -\r\n\r\n# 合并指定分支到当前分支\r\ngit merge <branch>\r\n\r\n# 新建分支后 push 代码即可创建对应名称的远程分支\r\n\r\n# 删除分支\r\ngit branch -d <branchName>\r\n\r\n# 删除远程分支\r\ngit push <remote> --delete <branchName>\r\n··\r\n\r\n### pull / push\r\n\r\n··bash\r\n# 拉取远程仓库的变化，并与本地分支合并\r\ngit pull <remote> <branch>\r\n\r\n# 上传本地指定分支到远程仓库\r\ngit push <remote> <branch>\r\n\r\n# 强制推送当前分支到远程仓库，即使有冲突\r\ngit push <remote> --force\r\n\r\n# 设置 pull / push 的默认分支，之后不用输入 <remote> <branch> 即可提交\r\ngit branch --set-upstream-to <remote> <branch>\r\n··\r\n\r\n### checkout / reset\r\n\r\n··bash\r\n# 还原工作区到修改前（时机在 add 之前）\r\ngit checkout .\r\n\r\n# 还原指定文件到修改前（时机在 add 之前）\r\ngit checkout <file>\r\n\r\n# 将暂存区的文件移除，不改变工作区（时机在 add 之后）\r\ngit reset .\r\n\r\n# 将暂存区指定的文件移除，不改变工作区（时机在 add 之后）\r\ngit reset <file>\r\n\r\n# 重置暂存区与工作区，与上一次 commit 保持一致\r\ngit reset --hard\r\n\r\n# 重置暂存区与工作区，与指定 commit 保持一致\r\ngit reset --hard <commit>\r\n··\r\n\r\n### stash\r\n\r\n··bash\r\n# 储存工作区并还原到修改前（通常用于切换到其他分支而不想提交）\r\ngit stash\r\n\r\n# 查看储存记录\r\ngit stash list\r\n\r\n# 将最近的一次储存还原到工作区\r\ngit stash apply\r\n\r\n# 将最近的一次储存还原到工作区并删除此存储\r\ngit stash pop\r\n\r\n# 删除指定的存储\r\ngit stash drop <stash@{n}>\r\n\r\n# 删除所有存储\r\ngit stash clear\r\n··\r\n\r\n### tag\r\n\r\n给历史中的某一个提交打上标签，以示重要，例如版本号\r\n\r\n··bash\r\n# 列出所有tag\r\ngit tag\r\n\r\n# 新建一个 tag 在当前 commit\r\ngit tag <tag>\r\n\r\n# 新建一个 tag 在指定校验和（或部分校验和，一般是前 7 位）\r\ngit tag <tag> <commit>\r\n\r\n# 删除本地 tag\r\ngit tag -d <tag>\r\n\r\n# 删除远程 tag\r\ngit push origin :refs/tags/<tagName>\r\n\r\n# 查看 tag 信息\r\ngit show <tag>\r\n\r\n# 提交指定 tag\r\ngit push <remote> <tag>\r\n\r\n# 提交所有 tag\r\ngit push <remote> --tags\r\n\r\n# 新建一个分支，指向某个 tag\r\ngit checkout -b <branch> <tag>\r\n··\r\n\r\n### status / log 相关\r\n\r\n··bash\r\n# 显示有变更的文件\r\ngit status\r\n\r\n# 精简显示有变更的文件\r\ngit status -s\r\n\r\n# 显示当前分支的版本历史\r\ngit log\r\n\r\n# 精简显示 commit 历史\r\ngit log --pretty=oneline\r\n\r\n# 精简显示 commit 历史并只展示最近的几次\r\ngit log --pretty=oneline -<n>\r\n\r\n# 显示 commit 历史，以及每次 commit 发生变更的文件\r\ngit log --stat\r\n\r\n# 搜索提交历史，根据关键词\r\ngit log -S <keyword>\r\n\r\n# 显示某个文件的版本历史\r\ngit log --follow <file>\r\n\r\n# 显示所有提交过的用户，按提交次数排序\r\ngit shortlog -sn\r\n\r\n# 显示指定文件是什么人在什么时间修改过\r\ngit blame <file>\r\n\r\n# 显示某次提交的元数据和内容变化\r\ngit show <commit>\r\n\r\n# 显示当前分支的最近几次提交\r\ngit reflog\r\n··\r\n\r\n### diff\r\n\r\n··bash\r\n# 显示暂存区和工作区的差异\r\ngit diff\r\n\r\n# 显示工作区与当前分支最新 commit 之间的差异\r\ngit diff HEAD\r\n\r\n# 显示两次提交之间的差异\r\ngit diff <first-branch>...<second-branch>\r\n\r\n# 显示今天写了多少行代码\r\ngit diff --shortstat \"@{0 day ago}\"\r\n··\r\n\r\n### 版本回退\r\n\r\n··bash\r\n# 查看提交记录，复制 commit 串\r\ngit log --pretty=oneline\r\n\r\n# 回到指定版本\r\ngit reset --hard <commit>\r\n··\r\n\r\n#### 方式一：强制覆盖提交\r\n\r\n··bash\r\ngit push <remote> --force\r\n··\r\n\r\n如果提示拒绝则可能项目被保护了\r\n在项目托管平台上的当前项目中设置（例如 GitLab）：Settings - Repository - Protected Branches - 点击 Unprotect\r\n\r\n#### 方式二：重新建立分支\r\n\r\n··bash\r\n# 复制临时分支\r\ngit checkout -b temp\r\ngit push <remote> temp\r\n\r\n# 删除主分支\r\ngit branch -d master\r\ngit push <remote> --delete master\r\n\r\n# 新建主分支\r\ngit checkout -b master\r\ngit push <remote> master\r\n\r\n# 删除临时分支\r\ngit branch -d temp\r\ngit push <remote> --delete temp\r\n··\r\n\r\n如果删除默认分支可能失败，先改为其他分支即可\r\n\r\n## .gitignore\r\n\r\n.gitignore 文件可以让 Git 不上传哪些文件，比如 node_modules 文件是没必要上传的\r\n在项目的根目录建立这个文件·.gitignore·，写出路径即可，例如：\r\n\r\n··bash\r\nREADME.md # 根目录下的文件\r\nbash/README.md # 文件夹内的文件\r\n*.md # 根目录下的所有 .md 文件\r\n**/*.md # 该项目中所有 .md 文件\r\n!README.md # 不忽略，即逃离 *.md 和 **/*.md 的范围\r\nnode_modules/ # 根目录下的 node_modules 文件夹\r\n··\r\n\r\n## 常见问题\r\n\r\n!!\r\n若当前 git 命令返回的信息过长或出现错误，即不能输入命令的情况下，按·Q·键即可退出\r\n·git add .·半天没反应的话，应该是有大文件，比如 node_modules 文件，用 .gitignore 忽略即可\r\n提示·fatal: Unable to create .git/index.lock': File exists.·错误，在·.git·文件夹内（项目根目录的隐藏文件夹）删除·index.lock·即可\r\n!!\r\n\r\n@@\r\n[git 官网](https://git-scm.com)\r\n[git 中文网](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)\r\n@@\r\n\r\n&2019/10/13\r\n`\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./git.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./git.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./git.vue?vue&type=template&id=23eed126&\"\nimport script from \"./git.vue?vue&type=script&lang=js&\"\nexport * from \"./git.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}